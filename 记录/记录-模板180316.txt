###################################################################################################
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import datetime

starttime = datetime.datetime.now()
# Chrome Headless
chrome_options = Options()
chrome_options.add_argument('--headless')
chrome_options.add_argument('--disable-gpu')
driver = webdriver.Chrome(chrome_options=chrome_options)
#driver = webdriver.Chrome(executable_path=r"D:\chromedriver.exe",chrome_options=chrome_options)
#driver = webdriver.Chrome()

# 打开网址
driver.get('https://www.whoscored.com/Matches/1201922/LiveStatistics/Germany-Bundesliga-2017-2018-Borussia-Dortmund-Schalke-04')
driver.implicitly_wait(3)
endtime = datetime.datetime.now()
print('Urltime = ' + str((endtime - starttime).seconds) + 's')
# 射门数和控球率
# 选取元素
xpathlist = ['*[@id="statistics-table-away-summary"]/table/tbody', '*[@id="statistics-table-home-summary"]/table/tbody']
for xp in xpathlist:
    homeaway = ['Home', 'Away']
    i = 1
    while i < 30:
        playeralldata = []
        try:
            playerdata = []
            # 名字
            player = driver.find_element_by_xpath(
                '//*[@id="player-table-statistics-body"]/tr[%s]/td[@class="pn"]/a' % i).text
            # 换上换下
            try:
                inouttime = driver.find_element_by_xpath(
                    '//*[@id="player-table-statistics-body"]/tr[%s]/td[@class="pn"]/a/span' % i).text
                if len(inouttime) > 0:
                    inouttype = driver.find_element_by_xpath(
                        '//*[@id="player-table-statistics-body"]/tr[%s]/td[@class="pn"]/a/span/span' % i).get_attribute(
                        'data-type')
                else:
                    inouttype = 0
                    inouttime = 0
                if inouttime != '':
                    player = player.replace(inouttime, '')
                playerdata.append(player)
                playerdata.append(inouttype)
                playerdata.append(inouttime)
            except:
                playerdata.append(player)
                playerdata.append(0)
                playerdata.append(0)
            playeralldata.append(playerdata)
            playerdata = []
            # 年龄和位置
            try:
                # 年龄
                age = driver.find_element_by_xpath(
                    '//*[@id="player-table-statistics-body"]/tr[%s]/td[@class="pn"]/span[1]' % i).text
                playerdata.append(age)
                # 位置
                pos = driver.find_element_by_xpath(
                    '//*[@id="player-table-statistics-body"]/tr[%s]/td[@class="pn"]/span[2]' % i).text
                playerdata.append(pos)
            except:
                print(player + ' Age or Position Error')
            playeralldata.append(playerdata)
            playerdata = []
            # 关键数据
            try:
                # Rating
                rating = driver.find_element_by_xpath(
                    '//*[@id="player-table-statistics-body"]/tr[%s]/td[@class="rating "]' % i).text
                playerdata.append(rating)
                # Key Events
                j = 1
                allevent = []
                while j < 10:
                    events = []
                    try:
                        event = driver.find_element_by_xpath(
                            '//*[@id="player-table-statistics-body"]/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                i, j)).get_attribute('data-type')
                        eventminute = driver.find_element_by_xpath(
                            '//*[@id="player-table-statistics-body"]/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                i, j)).get_attribute('data-minute')
                        eventsecond = driver.find_element_by_xpath(
                            '//*[@id="player-table-statistics-body"]/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                i, j)).get_attribute('data-second')
                        events.append(event)
                        events.append(eventminute)
                        events.append(eventsecond)
                        allevent.append(events)
                        j += 1
                    except:
                        break
                playerdata.append(allevent)
            except:
                print(player + ' Key Data Error')
            playeralldata.append(playerdata)
            playerdata = []
            # 其他数据
            try:
                # 射门数
                shottotal = driver.find_element_by_xpath(
                    '//*[@id="player-table-statistics-body"]/tr[%s]/td[@class="ShotsTotal "]' % i).text
                playerdata.append(shottotal)
                # 射正数
                shotontarget = driver.find_element_by_xpath(
                    '//*[@id="player-table-statistics-body"]/tr[%s]/td[@class="ShotOnTarget "]' % i).text
                playerdata.append(shotontarget)
                # 关键传球数
                keypass = driver.find_element_by_xpath(
                    '//*[@id="player-table-statistics-body"]/tr[%s]/td[@class="KeyPassTotal "]' % i).text
                playerdata.append(keypass)
                # 传球成功率
                passsuccess = driver.find_element_by_xpath(
                    '//*[@id="player-table-statistics-body"]/tr[%s]/td[@class="PassSuccessInMatch "]' % i).text
                playerdata.append(passsuccess)
                # 空中争抢
                DuelAerialWon = driver.find_element_by_xpath(
                    '//*[@id="player-table-statistics-body"]/tr[%s]/td[@class="DuelAerialWon "]' % i).text
                playerdata.append(DuelAerialWon)
                # 触球数
                Touches = driver.find_element_by_xpath(
                    '//*[@id="player-table-statistics-body"]/tr[%s]/td[@class="Touches "]' % i).text
                playerdata.append(Touches)
            except:
                print(player + ' Other Data Error')
            i += 1
            playeralldata.append(playerdata)
            playerdata = []
            print(playeralldata)
        except:
            print(homeaway[xpathlist.index(xp)] + ' Team Total ' + str(i) + ' Player Downloaded')
            break

driver.quit()
endtime = datetime.datetime.now()
print('Runtime = ' + str((endtime - starttime).seconds) + 's')




***********************************************************************


###################################################################################################

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import datetime

starttime = datetime.datetime.now()
# Chrome Headless
chrome_options = Options()
chrome_options.add_argument('--headless')
chrome_options.add_argument('--disable-gpu')
driver = webdriver.Chrome(chrome_options=chrome_options)
#driver = webdriver.Chrome(executable_path=r"D:\chromedriver.exe",chrome_options=chrome_options)
#driver = webdriver.Chrome()

# 打开网址
driver.get('https://www.whoscored.com/Matches/1201922/LiveStatistics/Germany-Bundesliga-2017-2018-Borussia-Dortmund-Schalke-04')
driver.implicitly_wait(3)
endtime = datetime.datetime.now()
print('Urltime = ' + str((endtime - starttime).seconds) + 's')
# 射门数和控球率
# 选取元素

for xp in ['*[@id="statistics-table-away-summary"]/table/tbody', '*[@id="statistics-table-home-summary"]/table/tbody']:
    player = driver.find_element_by_class_name(
            '//%s/tr[%s]/td[@class="pn"]/a' % (xp, i)).text
    i = 1
    while i < 30:
        try:
            # 名字
            player = driver.find_element_by_xpath(
                '//%s/tr[%s]/td[@class="pn"]/a' % (xp, i)).text
            print(player)
            i += 1
        except:
            break







***********************************************************************

E:\PycharmProjects\Selenium\venv\Scripts\python.exe E:/PycharmProjects/Selenium/test4.py
Urltime = 32s
Ralf F?hrmann
Naldo
Benjamin Stambouli
Thilo Kehrer (45′)
Daniel Caligiuri
Bastian Oczipka
Max Meyer
Weston McKennie (32′)
Franco Di Santo (32′)
Guido Burgstaller
Yevhen Konoplyanka
Leon Goretzka (32′)
Amine Harit (32′)
Matija Nastasic (45′)
Alessandro Sch?pf
Alexander Nübel
Coke
Breel Embolo
Roman Weidenfeller
Marcel Schmelzer
Sokratis
?mer Toprak
Christian Pulisic
Raphael Guerreiro (82′)
Julian Weigl
Nuri Sahin
Mario G?tze (77′)
Andriy Yarmolenko (67′)
Pierre-Emerick Aubameyang
Dan-Axel Zagadou (82′)
Gonzalo Castro (77′)
Marc Bartra (67′)
André Schürrle
Maximilian Philipp
Shinji Kagawa
Dominik Reimann

Process finished with exit code 0

###################################################################################################

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import datetime

starttime = datetime.datetime.now()
# Chrome Headless
chrome_options = Options()
chrome_options.add_argument('--headless')
chrome_options.add_argument('--disable-gpu')
driver = webdriver.Chrome(chrome_options=chrome_options)
#driver = webdriver.Chrome(executable_path=r"D:\chromedriver.exe",chrome_options=chrome_options)
#driver = webdriver.Chrome()

# 打开网址
driver.get('https://www.whoscored.com/Matches/1201922/LiveStatistics/Germany-Bundesliga-2017-2018-Borussia-Dortmund-Schalke-04')
driver.implicitly_wait(3)
endtime = datetime.datetime.now()
print('Urltime = ' + str((endtime - starttime).seconds) + 's')
# 射门数和控球率
# 选取元素
xpathlist = ['*[@id="statistics-table-away-summary"]/table/tbody', '*[@id="statistics-table-home-summary"]/table/tbody']
for xp in xpathlist:
    homeaway = ['Home', 'Away']
    i = 1
    while i < 30:
        playeralldata = []
        try:
            playerdata = []
            # 名字
            player = driver.find_element_by_xpath(
                '//%s/tr[%s]/td[@class="pn"]/a' % (xp, i)).text
            # 换上换下
            try:
                inouttime = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="pn"]/a/span' % (xp, i)).text
                if len(inouttime) > 0:
                    inouttype = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="pn"]/a/span/span' % (xp, i)).get_attribute(
                        'data-type')
                else:
                    inouttype = 0
                    inouttime = 0
                if inouttime != '':
                    player = player.replace(inouttime, '')
                playerdata.append(player)
                playerdata.append(inouttype)
                playerdata.append(inouttime)
            except:
                playerdata.append(player)
                playerdata.append(0)
                playerdata.append(0)
            playeralldata.append(playerdata)
            playerdata = []
            # 年龄和位置
            try:
                # 年龄
                age = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="pn"]/span[1]' % (xp, i)).text
                playerdata.append(age)
                # 位置
                pos = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="pn"]/span[2]' % (xp, i)).text
                playerdata.append(pos)
            except:
                print(player + ' Age or Position Error')
            playeralldata.append(playerdata)
            playerdata = []
            # 关键数据
            try:
                # Rating
                rating = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="rating "]' % (xp, i)).text
                playerdata.append(rating)
                # Key Events
                j = 1
                allevent = []
                while j < 10:
                    events = []
                    try:
                        event = driver.find_element_by_xpath(
                            '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                xp, i, j)).get_attribute('data-type')
                        eventminute = driver.find_element_by_xpath(
                            '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                xp, i, j)).get_attribute('data-minute')
                        eventsecond = driver.find_element_by_xpath(
                            '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                xp, i, j)).get_attribute('data-second')
                        events.append(event)
                        events.append(eventminute)
                        events.append(eventsecond)
                        allevent.append(events)
                        j += 1
                    except:
                        break
                playerdata.append(allevent)
            except:
                print(player + ' Key Data Error')
            playeralldata.append(playerdata)
            playerdata = []
            # 其他数据
            try:
                # 射门数
                shottotal = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="ShotsTotal "]' % (xp, i)).text
                playerdata.append(shottotal)
                # 射正数
                shotontarget = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="ShotOnTarget "]' % (xp, i)).text
                playerdata.append(shotontarget)
                # 关键传球数
                keypass = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="KeyPassTotal "]' % (xp, i)).text
                playerdata.append(keypass)
                # 传球成功率
                passsuccess = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="PassSuccessInMatch "]' % (xp, i)).text
                playerdata.append(passsuccess)
                # 空中争抢
                DuelAerialWon = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="DuelAerialWon "]' % (xp, i)).text
                playerdata.append(DuelAerialWon)
                # 触球数
                Touches = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="Touches "]' % (xp, i)).text
                playerdata.append(Touches)
            except:
                print(player + ' Other Data Error')
            i += 1
            playeralldata.append(playerdata)
            playerdata = []
            print(playeralldata)
        except:
            print(homeaway[xpathlist.index(xp)] + ' Team Total ' + str(i - 1) + ' Player Downloaded')
            break

driver.quit()
endtime = datetime.datetime.now()
print('Runtime = ' + str((endtime - starttime).seconds) + 's')



***********************************************************************

E:\PycharmProjects\Selenium\venv\Scripts\python.exe "E:/PycharmProjects/Selenium/test 1.py"
Urltime = 24s
[['Ralf F?hrmann', 0, 0], ['29', ', GK'], ['5.73', [['17', '98', '44']]], ['0', '0', '0', '58.3', '0', '22']]
[['Naldo', 0, 0], ['35', ', DC'], ['7.56', [['16', '93', '33']]], ['1', '1', '0', '83', '8', '65']]
[['Benjamin Stambouli', 0, 0], ['27', ', DC'], ['7.33', [['1', '85', '5'], ['1', '60', '32'], ['16', '17', '49']]], ['0', '0', '3', '79.4', '2', '76']]
[['Thilo Kehrer ', '18', '(45′)'], ['21', ', DC'], ['5.32', [['17', '21', '55']]], ['0', '0', '0', '66.7', '1', '28']]
[['Daniel Caligiuri', 0, 0], ['30', ', DMR'], ['9.08', [['16', '85', '9'], ['17', '46', '40']]], ['4', '3', '1', '75', '1', '79']]
[['Bastian Oczipka', 0, 0], ['29', ', DML'], ['7.37', []], ['0', '0', '1', '74.2', '1', '68']]
[['Max Meyer', 0, 0], ['22', ', MC'], ['6.50', []], ['0', '0', '0', '92.1', '0', '73']]
[['Weston McKennie ', '18', '(32′)'], ['19', ', MC'], ['5.54', [['17', '2', '17']]], ['0', '0', '0', '60', '2', '8']]
[['Franco Di Santo ', '18', '(32′)'], ['28', ', FWR'], ['5.66', []], ['0', '0', '0', '100', '1', '7']]
[['Guido Burgstaller', 0, 0], ['28', ', FW'], ['7.40', [['16', '60', '35']]], ['3', '2', '0', '71.4', '0', '39']]
[['Yevhen Konoplyanka', 0, 0], ['28', ', FWL'], ['7.88', [['1', '93', '31'], ['17', '89', '29'], ['1', '64', '10']]], ['1', '0', '3', '73.3', '0', '32']]
[['Leon Goretzka ', '19', '(32′)'], ['23', ', Sub'], ['6.79', []], ['2', '0', '1', '78.6', '1', '37']]
[['Amine Harit ', '19', '(32′)'], ['20', ', Sub'], ['8.10', [['16', '64', '12']]], ['1', '1', '1', '84.2', '2', '42']]
[['Matija Nastasic ', '19', '(45′)'], ['24', ', Sub'], ['7.36', []], ['0', '0', '0', '78.1', '4', '50']]
[['Alessandro Sch?pf', 0, 0], ['24', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']]
[['Alexander Nübel', 0, 0], ['21', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']]
[['Coke', 0, 0], ['30', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']]
[['Breel Embolo', 0, 0], ['21', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']]
Home Team Total 19 Player Downloaded
[['Roman Weidenfeller', 0, 0], ['37', ', GK'], ['5.30', [['51', '60', '34']]], ['0', '0', '0', '46.3', '0', '46']]
[['Marcel Schmelzer', 0, 0], ['30', ', DC'], ['6.68', []], ['0', '0', '0', '82.2', '0', '64']]
[['Sokratis', 0, 0], ['29', ', DC'], ['6.94', [['17', '52', '23']]], ['0', '0', '0', '84', '3', '67']]
[['?mer Toprak', 0, 0], ['28', ', DC'], ['6.36', []], ['1', '0', '0', '71.4', '1', '50']]
[['Christian Pulisic', 0, 0], ['19', ', DMR'], ['5.76', []], ['0', '0', '1', '76', '0', '42']]
[['Raphael Guerreiro ', '18', '(82′)'], ['24', ', DML'], ['8.08', [['16', '24', '11']]], ['1', '1', '1', '91.9', '0', '70']]
[['Julian Weigl', 0, 0], ['22', ', MC'], ['6.72', []], ['0', '0', '0', '64', '1', '36']]
[['Nuri Sahin', 0, 0], ['29', ', MC'], ['6.82', [['17', '98', '45']]], ['1', '0', '2', '77.6', '3', '71']]
[['Mario G?tze ', '18', '(77′)'], ['25', ', AMC'], ['7.47', [['16', '19', '48']]], ['1', '1', '1', '72.4', '1', '49']]
[['Andriy Yarmolenko ', '18', '(67′)'], ['28', ', AMC'], ['6.81', []], ['0', '0', '2', '73.3', '1', '26']]
[['Pierre-Emerick Aubameyang', 0, 0], ['28', ', FW'], ['7.07', [['17', '71', '27'], ['17', '54', '24'], ['1', '19', '46'], ['16', '11', '11']]], ['7', '4', '1', '82.4', '1', '35']]
[['Dan-Axel Zagadou ', '19', '(82′)'], ['18', ', Sub'], ['5.78', []], ['0', '0', '0', '0', '0', '1']]
[['Gonzalo Castro ', '19', '(77′)'], ['30', ', Sub'], ['5.70', [['17', '78', '11']]], ['0', '0', '0', '0', '0', '2']]
[['Marc Bartra ', '19', '(67′)'], ['27', ', Sub'], ['5.99', []], ['0', '0', '0', '0', '0', '10']]
[['André Schürrle', 0, 0], ['27', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']]
[['Maximilian Philipp', 0, 0], ['24', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']]
[['Shinji Kagawa', 0, 0], ['28', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']]
[['Dominik Reimann', 0, 0], ['20', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']]
Away Team Total 19 Player Downloaded
Runtime = 177s

Process finished with exit code 0

###################################################################################################
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import datetime

starttime = datetime.datetime.now()
# Chrome Headless
chrome_options = Options()
chrome_options.add_argument('--headless')
chrome_options.add_argument('--disable-gpu')
driver = webdriver.Chrome(chrome_options=chrome_options)
#driver = webdriver.Chrome(executable_path=r"D:\chromedriver.exe",chrome_options=chrome_options)
#driver = webdriver.Chrome()

# 打开网址
driver.get('https://www.whoscored.com/Matches/1201922/LiveStatistics/Germany-Bundesliga-2017-2018-Borussia-Dortmund-Schalke-04')
driver.implicitly_wait(3)
endtime = datetime.datetime.now()
print('Urltime = ' + str((endtime - starttime).seconds) + 's')
alldata = []
# 射门信息
allshotdata = []
try:
    for i in range(1, 7):
        shotdata = []
        shota = driver.find_element_by_xpath(
            '//*[@id="match-report-team-statistics"]/div[1]/div[%s]/span[1]/span' % i).text
        shotb = driver.find_element_by_xpath(
            '//*[@id="match-report-team-statistics"]/div[1]/div[%s]/span[2]' % i).text
        shotc = driver.find_element_by_xpath(
            '//*[@id="match-report-team-statistics"]/div[1]/div[%s]/span[3]/span' % i).text
        shotdata.append(shotb)
        shotdata.append(shota)
        shotdata.append(shotc)
        print(shotdata)
        allshotdata.append(shotdata)
except:
    print('Shot Data Error')
alldata.append(allshotdata)
# 控球率
Possessiondata = []
try:
    shotdata = []
    possa = driver.find_element_by_xpath(
        '//*[@id="match-report-team-statistics"]/div[2]/div[2]/span/span[2]/span').text
    possb = driver.find_element_by_xpath(
        '//*[@id="match-report-team-statistics"]/div[2]/div[2]/span/span[3]/span').text
    Possessiondata.append(possa)
    Possessiondata.append(possb)
    print(Possessiondata)
except:
    print('Possession Error')
alldata.append(Possessiondata)
# 球员信息
xpathlist = ['*[@id="statistics-table-away-summary"]/table/tbody', '*[@id="statistics-table-home-summary"]/table/tbody']
for xp in xpathlist:
    homeaway = ['Home', 'Away']
    i = 1
    while i < 30:
        playeralldata = []
        try:
            playerdata = []
            # 名字
            player = driver.find_element_by_xpath(
                '//%s/tr[%s]/td[@class="pn"]/a' % (xp, i)).text
            # 换上换下
            try:
                inouttime = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="pn"]/a/span' % (xp, i)).text
                if len(inouttime) > 0:
                    inouttype = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="pn"]/a/span/span' % (xp, i)).get_attribute(
                        'data-type')
                else:
                    inouttype = 0
                    inouttime = 0
                if inouttime != '':
                    player = player.replace(inouttime, '')
                playerdata.append(player)
                playerdata.append(inouttype)
                playerdata.append(inouttime)
            except:
                playerdata.append(player)
                playerdata.append(0)
                playerdata.append(0)
            playeralldata.append(playerdata)
            playerdata = []
            # 年龄和位置
            try:
                # 年龄
                age = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="pn"]/span[1]' % (xp, i)).text
                playerdata.append(age)
                # 位置
                pos = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="pn"]/span[2]' % (xp, i)).text
                playerdata.append(pos)
            except:
                print(player + ' Age or Position Error')
            playeralldata.append(playerdata)
            playerdata = []
            # 关键数据
            try:
                # Rating
                rating = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="rating "]' % (xp, i)).text
                playerdata.append(rating)
                # Key Events
                j = 1
                allevent = []
                while j < 10:
                    events = []
                    try:
                        event = driver.find_element_by_xpath(
                            '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                xp, i, j)).get_attribute('data-type')
                        eventminute = driver.find_element_by_xpath(
                            '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                xp, i, j)).get_attribute('data-minute')
                        eventsecond = driver.find_element_by_xpath(
                            '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                xp, i, j)).get_attribute('data-second')
                        events.append(event)
                        events.append(eventminute)
                        events.append(eventsecond)
                        allevent.append(events)
                        j += 1
                    except:
                        break
                playerdata.append(allevent)
            except:
                print(player + ' Key Data Error')
            playeralldata.append(playerdata)
            playerdata = []
            # 其他数据
            try:
                # 射门数
                shottotal = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="ShotsTotal "]' % (xp, i)).text
                playerdata.append(shottotal)
                # 射正数
                shotontarget = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="ShotOnTarget "]' % (xp, i)).text
                playerdata.append(shotontarget)
                # 关键传球数
                keypass = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="KeyPassTotal "]' % (xp, i)).text
                playerdata.append(keypass)
                # 传球成功率
                passsuccess = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="PassSuccessInMatch "]' % (xp, i)).text
                playerdata.append(passsuccess)
                # 空中争抢
                DuelAerialWon = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="DuelAerialWon "]' % (xp, i)).text
                playerdata.append(DuelAerialWon)
                # 触球数
                Touches = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="Touches "]' % (xp, i)).text
                playerdata.append(Touches)
            except:
                print(player + ' Other Data Error')
            i += 1
            playeralldata.append(playerdata)
            playerdata = []
            alldata.append(playeralldata)
        except:
            print(homeaway[xpathlist.index(xp)] + ' Team Total ' + str(i - 1) + ' Player Downloaded')
            break
driver.quit()
endtime = datetime.datetime.now()
print('Runtime = ' + str((endtime - starttime).seconds) + 's')
print(alldata)



***********************************************************************
E:\PycharmProjects\Selenium\venv\Scripts\python.exe "E:/PycharmProjects/Selenium/test 1.py"
Urltime = 37s
['Shots', '11', '12']
['Shots on target', '6', '7']
['Pass Success %', '73%', '79%']
['Aerial Duel Success', '32%', '68%']
['Dribbles won', '5', '13']
['Tackles', '24', '21']
['47%', '53%']
Home Team Total 18 Player Downloaded
Away Team Total 18 Player Downloaded
Runtime = 183s
[[['Shots', '11', '12'], ['Shots on target', '6', '7'], ['Pass Success %', '73%', '79%'], ['Aerial Duel Success', '32%', '68%'], ['Dribbles won', '5', '13'], ['Tackles', '24', '21']], ['47%', '53%'], [['Ralf F?hrmann', 0, 0], ['29', ', GK'], ['5.73', [['17', '98', '44']]], ['0', '0', '0', '58.3', '0', '22']], [['Naldo', 0, 0], ['35', ', DC'], ['7.56', [['16', '93', '33']]], ['1', '1', '0', '83', '8', '65']], [['Benjamin Stambouli', 0, 0], ['27', ', DC'], ['7.33', [['1', '85', '5'], ['1', '60', '32'], ['16', '17', '49']]], ['0', '0', '3', '79.4', '2', '76']], [['Thilo Kehrer ', '18', '(45′)'], ['21', ', DC'], ['5.32', [['17', '21', '55']]], ['0', '0', '0', '66.7', '1', '28']], [['Daniel Caligiuri', 0, 0], ['30', ', DMR'], ['9.08', [['16', '85', '9'], ['17', '46', '40']]], ['4', '3', '1', '75', '1', '79']], [['Bastian Oczipka', 0, 0], ['29', ', DML'], ['7.37', []], ['0', '0', '1', '74.2', '1', '68']], [['Max Meyer', 0, 0], ['22', ', MC'], ['6.50', []], ['0', '0', '0', '92.1', '0', '73']], [['Weston McKennie ', '18', '(32′)'], ['19', ', MC'], ['5.54', [['17', '2', '17']]], ['0', '0', '0', '60', '2', '8']], [['Franco Di Santo ', '18', '(32′)'], ['28', ', FWR'], ['5.66', []], ['0', '0', '0', '100', '1', '7']], [['Guido Burgstaller', 0, 0], ['28', ', FW'], ['7.40', [['16', '60', '35']]], ['3', '2', '0', '71.4', '0', '39']], [['Yevhen Konoplyanka', 0, 0], ['28', ', FWL'], ['7.88', [['1', '93', '31'], ['17', '89', '29'], ['1', '64', '10']]], ['1', '0', '3', '73.3', '0', '32']], [['Leon Goretzka ', '19', '(32′)'], ['23', ', Sub'], ['6.79', []], ['2', '0', '1', '78.6', '1', '37']], [['Amine Harit ', '19', '(32′)'], ['20', ', Sub'], ['8.10', [['16', '64', '12']]], ['1', '1', '1', '84.2', '2', '42']], [['Matija Nastasic ', '19', '(45′)'], ['24', ', Sub'], ['7.36', []], ['0', '0', '0', '78.1', '4', '50']], [['Alessandro Sch?pf', 0, 0], ['24', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']], [['Alexander Nübel', 0, 0], ['21', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']], [['Coke', 0, 0], ['30', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']], [['Breel Embolo', 0, 0], ['21', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']], [['Roman Weidenfeller', 0, 0], ['37', ', GK'], ['5.30', [['51', '60', '34']]], ['0', '0', '0', '46.3', '0', '46']], [['Marcel Schmelzer', 0, 0], ['30', ', DC'], ['6.68', []], ['0', '0', '0', '82.2', '0', '64']], [['Sokratis', 0, 0], ['29', ', DC'], ['6.94', [['17', '52', '23']]], ['0', '0', '0', '84', '3', '67']], [['?mer Toprak', 0, 0], ['28', ', DC'], ['6.36', []], ['1', '0', '0', '71.4', '1', '50']], [['Christian Pulisic', 0, 0], ['19', ', DMR'], ['5.76', []], ['0', '0', '1', '76', '0', '42']], [['Raphael Guerreiro ', '18', '(82′)'], ['24', ', DML'], ['8.08', [['16', '24', '11']]], ['1', '1', '1', '91.9', '0', '70']], [['Julian Weigl', 0, 0], ['22', ', MC'], ['6.72', []], ['0', '0', '0', '64', '1', '36']], [['Nuri Sahin', 0, 0], ['29', ', MC'], ['6.82', [['17', '98', '45']]], ['1', '0', '2', '77.6', '3', '71']], [['Mario G?tze ', '18', '(77′)'], ['25', ', AMC'], ['7.47', [['16', '19', '48']]], ['1', '1', '1', '72.4', '1', '49']], [['Andriy Yarmolenko ', '18', '(67′)'], ['28', ', AMC'], ['6.81', []], ['0', '0', '2', '73.3', '1', '26']], [['Pierre-Emerick Aubameyang', 0, 0], ['28', ', FW'], ['7.07', [['17', '71', '27'], ['17', '54', '24'], ['1', '19', '46'], ['16', '11', '11']]], ['7', '4', '1', '82.4', '1', '35']], [['Dan-Axel Zagadou ', '19', '(82′)'], ['18', ', Sub'], ['5.78', []], ['0', '0', '0', '0', '0', '1']], [['Gonzalo Castro ', '19', '(77′)'], ['30', ', Sub'], ['5.70', [['17', '78', '11']]], ['0', '0', '0', '0', '0', '2']], [['Marc Bartra ', '19', '(67′)'], ['27', ', Sub'], ['5.99', []], ['0', '0', '0', '0', '0', '10']], [['André Schürrle', 0, 0], ['27', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']], [['Maximilian Philipp', 0, 0], ['24', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']], [['Shinji Kagawa', 0, 0], ['28', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']], [['Dominik Reimann', 0, 0], ['20', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']]]

Process finished with exit code 0


###################################################################################################
import requests
import lxml.html
import xlwings as xw
from xlwings.constants import InsertShiftDirection
import datetime
import configparser


def sow_matchs(league):
    # 网址
    headers = {
        'User-Agent': "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"}
    all_url = league
    html = requests.get(all_url, headers=headers)
    # Soup = BeautifulSoup(html.text, 'lxml')
    tree = lxml.html.fromstring(html.text)
    AllGame = []
    # 判断是单场比赛还是比赛列表
    header = all_url.split('/')[3]
    if header == 'matches':
        try:
            AllGame.append(getsoccerway(all_url))
            print(getsoccerway(all_url)[0])
        except Exception as inst:
            print('error in ' + all_url)
            print(type(inst))
            print(inst.args)

    else:
        page = tree.xpath('/html/body ')
        games_a = tree.xpath(
            '//td[@class="score-time score"]/a ')
        games = [('https://int.soccerway.com/' + elem.get('href')) for elem in games_a]
        gamesss = [('No.'+str(games.index(elem)+1)+elem[25:])for elem in games]
        #print('\n'.join(gamesss))
        for x in gamesss:
            try:
                y = x.split('/')
                print('-----------------------------------------------------------------------')
                print('|' + y[0] + '|' + '/'.join([y[3], y[4], y[5]]) + '| |' + y[7] + '| |' + y[8] + '| |' + y[9] + '|' )
            except Exception as inst:
                print('-----------------------------------------------------------------------')
                print(x)
        print('-----------------------------------------------------------------------')
        start_num = input('Begin by Which Game(No.):')
        end_num = input('End by Which Game(No.):')

        if start_num == '':
            start_num = 1
        if end_num == '':
            end_num = len(games)+2
        for match in games[int(start_num)-1:int(end_num)]:
            try:
                AllGame.append(getsoccerway(match))
                number = games.index(match) + 1
                print('No.'+ str(number)+' '+getsoccerway(match)[0])
            except Exception as inst:
                print('error in ' + match)
                print(type(inst))
                print(inst.args)

                break

    return AllGame


def getsoccerway(url):
    # 网址
    headers = {
        'User-Agent': "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"}
    all_url = url
    html = requests.get(all_url, headers=headers)
    #Soup = BeautifulSoup(html.text, 'lxml')
    tree = lxml.html.fromstring(html.text)
    # 写入excel
    #wb = xlwt.Workbook()
    #建立多维列表
    Game = []
    TeamHome = []
    TeamAway = []
    GameEvent = []
    Title = []

    # 队名

    team = tree.xpath('//*[@id="subheading"]/h1/text()')[0]
    team_s = team.split('vs.')
    #sh = wb.add_sheet('H_' + team_s[0].strip()[0:4])
    #sa = wb.add_sheet('A_' + team_s[1].strip()[0:4])
    #se = wb.add_sheet('Event')
    #sh.write(1, 1, team_s[0].strip())
    #sh.write(1, 2, 'H')
    #sa.write(1, 1, team_s[1].strip())
    #sa.write(1, 2, 'A')
    TeamHome.insert(0,team_s[0].strip())
    TeamAway.insert(0,team_s[1].strip())
    Title.insert(0,[team_s[0].strip(),team_s[1].strip()])

    # 日期

    date_ta = tree.xpath('//*[@id="page_match_1_block_match_info_4"]/div[2]/div[2]/div[1]/dl/dt')
    date_da = tree.xpath('//*[@id="page_match_1_block_match_info_4"]/div[2]/div[2]/div[1]/dl/dd')
    date_tb = [elem.text_content() for elem in date_ta]
    date_db = [elem.text_content() for elem in date_da]

    date_s = date_db[date_tb.index('Date')]
    date_t = date_s.split(' ')
    Calendar = {"January": "01", "February": "02", "March": "03", "April": "04", "May": "05", "June": "06",
                "July": "07", "August": "08", "September": "09", "October": "10", "November": "11",
                "December": "12"}

    if 'Kick-off' in date_tb:
        datets = date_db[date_tb.index('Kick-off')]
        datet_s = datets.split('\n')[1].strip()
        dt_a = date_t[2] + '/' + Calendar[date_t[1]] + '/' + date_t[0] + '/' + datet_s.split(':')[0] + '/' + \
               datet_s.split(':')[1]
        dt = datetime.datetime.strptime(dt_a, '%Y/%m/%d/%H/%M')
        dt_cn = dt + datetime.timedelta(hours=7)
        dt_b = dt_cn.strftime('%Y/%m/%d-%H:%M').split('-')
        date_a = dt_b[0]
        date_b = dt_b[1]
    else:
        date_a = date_t[2] + '/' + Calendar[date_t[1]] + '/' + date_t[0]
        date_b = "No Kick-off Time Information"

    Title.insert(1,[date_a,date_b])
    #sh.write(1, 0, date_a)
    #sh.write(2, 0, date_b)
    #sa.write(1, 0, date_a)
    #sa.write(2, 0, date_b)
    #赛事，场地，观众
    #赛事
    compe = ""
    if 'Competition' in date_tb:
        compe = date_db[date_tb.index('Competition')]
        #sh.write(3, 0, compe)
        #sa.write(3, 0, compe)

    Title.insert(2, compe)
    #场地,观众

    VA_ta = tree.xpath('//*[@id="page_match_1_block_match_info_4"]/div[2]/div[2]/div[3]/dl/dt')
    VA_da = tree.xpath('//*[@id="page_match_1_block_match_info_4"]/div[2]/div[2]/div[3]/dl/dd')
    VA_tb = [elem.text_content() for elem in VA_ta]
    VA_db = [elem.text_content() for elem in VA_da]
    Venue_V = ''
    Venue_C = ''
    attd = ''
    if 'Venue' in VA_tb:
        Venue = VA_db[VA_tb.index('Venue')]
        Venue_VC = Venue.split('(')
        Venue_V = Venue_VC[0]
        Venue_VC.pop(0)
        Venue_C = ' '.join(' '.join(Venue_VC).split(")"))

        #sh.write(4, 0, Venue_V)
        #sh.write(5, 0, Venue_C)
        #sa.write(4, 0, Venue_V)
        #sa.write(5, 0, Venue_C)
    if 'Attendance' in VA_tb:
        attd = VA_db[VA_tb.index('Attendance')]
        #sh.write(6, 0, int(attd))
        #sa.write(6, 0, int(attd))

    Title.insert(3, [Venue_V,Venue_C,attd])

    # 比分
    GameScore = []
    score_ea = tree.xpath('//*[@id="page_match_1_block_match_info_4"]/div[2]/div[2]/div[2]/dl/dt')
    score_sa = tree.xpath('//*[@id="page_match_1_block_match_info_4"]/div[2]/div[2]/div[2]/dl/dd')
    score_e = [elem.text_content() for elem in score_ea]
    score_s = [elem.text_content() for elem in score_sa]
    if 'Full-time' in score_e:
        score = score_s[score_e.index('Full-time')]
        GameScore.append([int(score.split('-')[0].strip()),int(score.split('-')[1].strip())])
    else :GameScore.append("No Full Time")
        #sh.write(1, 3, int(score.split('-')[0].strip()))
        #sh.write(1, 4, int(score.split('-')[1].strip()))
        #sa.write(1, 3, int(score.split('-')[1].strip()))
        #sa.write(1, 4, int(score.split('-')[0].strip()))
        #sh.write(1, 6, score.strip())
        #sa.write(1, 6, score.split('-')[1].strip()+' - '+score.split('-')[0].strip())
    if 'Half-time' in score_e:
        scoreh = score_s[score_e.index('Half-time')]
        GameScore.append([scoreh.strip(),scoreh.split('-')[1].strip()+' - '+scoreh.split('-')[0].strip()])
    else:GameScore.append("No Half Time")
        #sh.write(1, 5, scoreh.strip())
        #sa.write(1, 5, scoreh.split('-')[1].strip()+' - '+scoreh.split('-')[0].strip())
    if 'Extra-time' in score_e:
        scoree = score_s[score_e.index('Extra-time')]
        GameScore.append([scoree.strip(), scoree.split('-')[1].strip() + ' - ' + scoree.split('-')[0].strip()])
    else:
        GameScore.append("No Extra Time")
    #sh.write(1, 7, scoree.strip())
        #sa.write(1, 7, scoree.split('-')[1].strip()+' - '+scoree.split('-')[0].strip())
    if 'Penalties' in score_e:
        scorep = score_s[score_e.index('Penalties')]
        GameScore.append([scorep.strip(), scorep.split('-')[1].strip() + ' - ' + scorep.split('-')[0].strip()])
    else:
        GameScore.append("No Penalties")
        #sh.write(1, 8, scorep.strip())
        #sa.write(1, 8, scorep.split('-')[1].strip()+' - '+scorep.split('-')[0].strip())

    Title.insert(4, GameScore)


    # 表头
    #sh.write(0,0,'Date')
    #sh.write(0,1,'Team')
    #sh.write(0,2,'H/A')
    #sh.write(0,3,'Score')
    #sh.write(0,4,'O-Score')
    #sh.write(0,5,'Half-time')
    #sh.write(0,6,'Full-time')
    #sh.write(0,7,'Extra-time')
    #sh.write(0,8,'Penalties')
    #sh.write(0,9,'RCs')

    #sh.write(3, 5, 'Goal')
    #sh.write(3, 6, 'PG')
    #sh.write(3, 7, 'Assist')
    #sh.write(3, 15, 'ET Goal')
    #sh.write(3, 8, 'YC')
    #sh.write(3, 9, 'Y2C')
    #sh.write(3, 10, 'RC')
    #sh.write(3, 11, 'OG')
    #sh.write(3, 12, 'PK Miss')
    #sh.write(3, 13, 'Early Sub')
    #sh.write(3, 14, 'Goal Time')

    #sa.write(0,0,'Date')
    #sa.write(0,1,'Team')
    #sa.write(0,2,'H/A')
    #sa.write(0,3,'Score')
    #sa.write(0,4,'O-Score')
    #sa.write(0,5,'Half-time')
    #sa.write(0,6,'Full-time')
    #sa.write(0,7,'Extra-time')
    #sa.write(0,8,'Penalties')
    #sa.write(0,9,'RCs')


    #sa.write(3, 5, 'Goal')
    #sa.write(3, 6, 'PG')
    #sa.write(3, 7, 'Assist')
    #sa.write(3, 15, 'ET Goal')
    #sa.write(3, 8, 'YC')
    #sa.write(3, 9, 'Y2C')
    #sa.write(3, 10, 'RC')
    #sa.write(3, 11, 'OG')
    #sa.write(3, 12, 'PK Miss')
    #sa.write(3, 13, 'Early Sub')
    #sa.write(3, 14, 'Goal Time')

    #se.write(2, 0, 'Time')
    #se.write(2, 1, 'Home')
    #se.write(2, 2, 'OG\PG')
    #se.write(2, 3, 'Assist')
    #se.write(2, 4, 'Score')
    #se.write(2, 5, 'Away')
    #se.write(2, 6, 'OG\PG')
    #se.write(2, 7, 'Assist')
    #se.write(0, 1, 'LG')
    #se.write(0, 0, 'PM')
    #se.write(0, 2, 'PG')
    #se.write(0, 3, 'OG')
    #se.write(0, 4, 'Events Num')
    #se.write(0, 5, 'LG')
    #se.write(0, 6, 'PG')
    #se.write(0, 7, 'OG')
    #se.write(0, 8, 'PM')
    PMH = []
    PMA = []
    # 事件
    GoalEvent = []
    HomeGoalAll = []
    AwayGoalAll = []
    eventid = '#page_match_1_block_match_goals_13'
    event = tree.cssselect('%s > div > table > tr'%eventid)
    if len(event) == 0 :
        eventid = '#page_match_1_block_match_goals_12'
        event = tree.cssselect('%s > div > table > tr' % eventid)
    event_num = eventid[-2:]


    #se.write(1, 4, len(event))
    OGH = []
    PGH = []
    LGH = []
    OGA = []
    PGA = []
    LGA = []
    ASH = []
    ASA = []
    RCH = []
    RCA = []
    for eventn in range(1, len(event) + 1):
        HomeGoal = []
        AwayGoal = []
        # 时间
        event_time_a = tree.xpath(
            '//*[@id="page_match_1_block_match_goals_%s"]/div/table/tr[%s]/td[1]/div/span[1]' % (event_num,eventn))
        event_time_b = tree.xpath(
            '//*[@id="page_match_1_block_match_goals_%s"]/div/table/tr[%s]/td[3]/div/span[1]' % (event_num,eventn))
        event_time = [''.join([elem.text_content() for elem in event_time_a]),
                      ''.join([elem.text_content() for elem in event_time_b])]
        #se.write(eventn + 2, 0, ''.join(event_time))
        # 比分
        event_score = tree.xpath(
            '//*[@id="page_match_1_block_match_goals_%s"]/div/table/tr[%s]/td[2]/div' %(event_num,eventn))[0].text_content()
        # se.write(eventn + 2, 4, event_a)

        # 主队

        event_a = tree.xpath(
            '//*[@id="page_match_1_block_match_goals_%s"]/div/table/tr[%s]/td[1]/div/a' % (event_num,eventn))
        eventa = ''.join([elem.text_content() for elem in event_a])
        opg_a = ''.join(tree.xpath(
            '//*[@id="page_match_1_block_match_goals_%s"]/div/table/tr[%s]/td[1]/div/text()' % (event_num,eventn))).strip()
        opga = len(''.join(opg_a).split())
        assista = tree.xpath(
            '//*[@id="page_match_1_block_match_goals_%s"]/div/table/tr[%s]/td[1]/div/span[@class="assist"]/a/text()' % (event_num,eventn))
        #se.write(eventn + 2, 1, eventa)
        if eventa != '':
            HomeGoal.append(eventa)
            if opga > 0:
                opga_a = opg_a.split('(')[-1].split(')')[0]
                HomeGoal.append(opga_a)
                # se.write(eventn + 2, 2, opga_a)
                if opga_a == 'OG':
                    OGH.append(event_time)
                elif opga_a == "PG":
                    PGH.append(event_time)
            elif len(assista) > 0:
                assist_a = tree.xpath(
                    '//*[@id="page_match_1_block_match_goals_%s"]/div/table/tr[%s]/td[1]/div/span[2]/a/text()[1]' % (event_num,eventn))[
                    0]
                HomeGoal.append(assist_a.strip())
                # se.write(eventn + 2, 3, assist_a.strip())
                ASH.append(assist_a.strip())
            else:HomeGoal.append('')
            if len(''.join([elem.text_content() for elem in event_time_a]).split('\'')[0].split('+')[0]) > 0:
                if int(''.join([elem.text_content() for elem in event_time_a]).split('\'')[0].split('+')[0]) >= 85:
                    if int(''.join([elem.text_content() for elem in event_time_a]).split('\'')[0].split('+')[0]) <= 90:
                        LGH.append(''.join([elem.text_content() for elem in event_time_a]))
            HomeGoal.insert(0, ''.join(event_time))
            HomeGoal.insert(3, event_score)
            HomeGoalAll.append(HomeGoal)

        # 客队

        event_a = tree.xpath(
            '//*[@id="page_match_1_block_match_goals_%s"]/div/table/tr[%s]/td[3]/div/a' % (event_num,eventn))
        eventa = ''.join([elem.text_content() for elem in event_a])
        opg_a = ''.join(tree.xpath(
            '//*[@id="page_match_1_block_match_goals_%s"]/div/table/tr[%s]/td[3]/div/text()' % (event_num,eventn))).strip()
        opga = len(''.join(opg_a).split())
        assista = tree.xpath(
            '//*[@id="page_match_1_block_match_goals_%s"]/div/table/tr[%s]/td[3]/div/span[@class="assist"]/a/text()' % (event_num,eventn))
        if eventa != '':
            AwayGoal.insert(2, eventa)
            # se.write(eventn + 2, 5, eventa)
            if opga > 0:
                opga_a = opg_a.split('(')[-1].split(')')[0]
                AwayGoal.append(opga_a)
                # se.write(eventn + 2, 6, opga_a)
                if opga_a == 'OG':
                    OGA.append(event_time)
                elif opga_a == "PG":
                    PGA.append(event_time)
            elif len(assista) > 0:
                assist_a = tree.xpath(
                    '//*[@id="page_match_1_block_match_goals_%s"]/div/table/tr[%s]/td[3]/div/span[2]/a/text()[1]' % (event_num,eventn))[
                    0]
                AwayGoal.append(assist_a.strip())
                # se.write(eventn + 2, 7, assist_a.strip())
                ASA.append(assist_a.strip())
            else:AwayGoal.append('')
            if len(''.join([elem.text_content() for elem in event_time_b]).split('\'')[0].split('+')[0]) > 0:
                if int(''.join([elem.text_content() for elem in event_time_b]).split('\'')[0].split('+')[0]) >= 85:
                    if int(''.join([elem.text_content() for elem in event_time_b]).split('\'')[0].split('+')[0]) <= 90:
                        LGA.append(''.join([elem.text_content() for elem in event_time_b]))
            AwayGoal.insert(0, ''.join(event_time))
            AwayGoal.insert(3, event_score)
            AwayGoalAll.append(AwayGoal)
    GoalEvent.append(HomeGoalAll)
    GoalEvent.append(AwayGoalAll)
    #se.write(1, 1, ' '.join(LGH))
    #se.write(1, 2, ' '.join(PGH))
    #se.write(1, 3, ' '.join(OGH))
    #se.write(1, 5, ' '.join(LGA))
    #se.write(1, 6, ' '.join(PGA))
    #se.write(1, 7, ' '.join(OGA))




    # 主队首发球员
    PlayerHome = []
    for teamn in range(1, 12):
        PlayerHomei = []
        playerh_a = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container left"]/table[@class="playerstats lineups table"]/tbody/tr[%s]/td[@class="player large-link"]/a' % teamn)
        playerh = [elem.text_content().strip() for elem in playerh_a][0]
        numh_a = tree.xpath('//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container left"]/table[@class="playerstats lineups table"]/tbody/tr[%s]/td[@class="shirtnumber"]' % teamn)
        numh = ''.join([elem.text_content().strip() for elem in numh_a])
        subed = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container left"]/table[@class="playerstats lineups table"]/tbody/tr[%s]/td[@class="player large-link"]/img' % teamn)
        span_t = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container left"]/table[@class="playerstats lineups table"]/tbody/tr[%s]/td[@class="bookings"]/span/img' % teamn)
        span_time = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container left"]/table[@class="playerstats lineups table"]/tbody/tr[%s]/td[@class="bookings"]/span' % teamn)
        if len(numh_a) != 0:
            PlayerHomei.append(int(numh))
        else:PlayerHomei.append("no number")
            #sh.write(teamn + 3, 1, int(numh))
        PlayerHomei.insert(0,playerh.strip())
        #sh.write(teamn + 3, 2, playerh.strip())
        subed_a = [elem.get('title') for elem in subed]
        PlayerHomei.append(subed_a)
        #sh.write(teamn + 3, 3, subed_a)
        span_t_all = [elem.get('src').split('/')[-1].split('.')[0] for elem in span_t]
        span_time_a = [elem.text_content().strip() for elem in span_time]
        goal = 0
        goal_t = []
        ET_goal = []
        pg = []
        og = []
        pm = []
        # 判断事件
        YCi = []
        Y2Ci = []
        RCi = []
        for j in range(0, len(span_t_all)):
            if span_t_all[j] == 'G' or span_t_all[j] == 'PG':
                goal += 1
                goal_t.append(span_time_a[j])
                if int(span_time_a[j].split('\'')[0].split('+')[0]) > 90:
                    ET_goal.append(span_time_a[j])
                    goal -= 1
            if span_t_all[j] == 'PG':
                pg.append(span_time_a[j])
            if span_t_all[j] == 'YC':
                YCi.append(span_time_a[j])
                #sh.write(teamn + 3, 8, span_time_a[j])
            if span_t_all[j] == 'Y2C':
                Y2Ci.append(span_time_a[j])
                RCH.append(span_time_a[j])
                #sh.write(teamn + 3, 9, span_time_a[j])
            if span_t_all[j] == 'RC':
                RCH.append(span_time_a[j])
                RCi.append(span_time_a[j])
                #sh.write(teamn + 3, 10, span_time_a[j])
            if span_t_all[j] == 'OG':
                og.append(span_time_a[j])
            if span_t_all[j] == 'PM':
                pm.append(span_time_a[j])
                PMH.append(span_time_a[j])
        PlayerHomei.append(YCi)
        PlayerHomei.append(Y2Ci)
        PlayerHomei.append(RCi)
        assis = 0
        for elem in ASH:
            if elem == playerh.strip():
                assis += 1

        #球员链接
        playerh_link = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container left"]/table[@class="playerstats lineups table"]/tbody/tr[%s]/td[@class="player large-link"]/a' % teamn)
        playerlink = [elem.get('href') for elem in playerh_link]
        #if goal > 0:
            #sh.write(teamn + 3, 5, goal)
        PlayerHomei.append(goal)
        PlayerHomei.append(pg)
        #sh.write(teamn + 3, 6, pg)
        #if assis > 0:
            #sh.write(teamn + 3, 7, assis)
        PlayerHomei.append(assis)
        PlayerHomei.append(ET_goal)
        PlayerHomei.append(og)
        PlayerHomei.append(pm)
        PlayerHomei.append(goal_t)
        PlayerHomei.append(playerlink)
        #sh.write(teamn + 3, 15, ET_goal)
        #sh.write(teamn + 3, 11, og)
        #sh.write(teamn + 3, 12, pm)
        #sh.write(teamn + 3, 14, ','.join(goal_t))
        PlayerHome.append(PlayerHomei)


    # 客队首发球员
    PlayerAway = []
    for teamn in range(1, 12):
        PlayerAwayi = []
        playerh_a = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container right"]/table[@class="playerstats lineups table"]/tbody/tr[%s]/td[@class="player large-link"]/a' % teamn)
        playerh = [elem.text_content().strip() for elem in playerh_a][0]
        numh_a = tree.xpath('//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container right"]/table[@class="playerstats lineups table"]/tbody/tr[%s]/td[@class="shirtnumber"]' % teamn)
        numh = ''.join([elem.text_content().strip() for elem in numh_a])
        subed = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container right"]/table[@class="playerstats lineups table"]/tbody/tr[%s]/td[@class="player large-link"]/img' % teamn)
        span_t = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container right"]/table[@class="playerstats lineups table"]/tbody/tr[%s]/td[@class="bookings"]/span/img' % teamn)
        span_time = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container right"]/table[@class="playerstats lineups table"]/tbody/tr[%s]/td[@class="bookings"]/span' % teamn)
        if len(numh_a) != 0:
            PlayerAwayi.append(int(numh))
        else:PlayerAwayi.append('no number')
            #sa.write(teamn + 3, 1, int(numh))
        #sa.write(teamn + 3, 2, playerh.strip())
        PlayerAwayi.insert(0,playerh.strip())
        subed_a = [elem.get('title') for elem in subed]
        PlayerAwayi.append(subed_a)
        #sa.write(teamn + 3, 3, subed_a)
        span_t_all = [elem.get('src').split('/')[-1].split('.')[0] for elem in span_t]
        span_time_a = [elem.text_content().strip() for elem in span_time]
        goal = 0
        goal_t = []
        ET_goal = []
        pg = []
        og = []
        pm = []
        # 判断事件
        YCi = []
        Y2Ci = []
        RCi = []
        for j in range(0, len(span_t_all)):
            if span_t_all[j] == 'G' or span_t_all[j] == 'PG':
                goal += 1
                goal_t.append(span_time_a[j])
                if int(span_time_a[j].split('\'')[0].split('+')[0]) > 90:
                    ET_goal.append(span_time_a[j])
                    goal -= 1
            if span_t_all[j] == 'PG':
                pg.append(span_time_a[j])
            if span_t_all[j] == 'YC':
                YCi.append(span_time_a[j])
                #sa.write(teamn + 3, 8, span_time_a[j])
            if span_t_all[j] == 'Y2C':
                #sa.write(teamn + 3, 9, span_time_a[j])
                RCA.append(span_time_a[j])
                Y2Ci.append(span_time_a[j])
            if span_t_all[j] == 'RC':
                #sa.write(teamn + 3, 10, span_time_a[j])
                RCA.append(span_time_a[j])
                RCi.append(span_time_a[j])
            if span_t_all[j] == 'OG':
                og.append(span_time_a[j])
            if span_t_all[j] == 'PM':
                pm.append(span_time_a[j])
                PMA.append(span_time_a[j])
        PlayerAwayi.append(YCi)
        PlayerAwayi.append(Y2Ci)
        PlayerAwayi.append(RCi)
        assis = 0
        for elem in ASA:
            if elem == playerh.strip():
                assis += 1

        #球员链接
        playerh_link = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container right"]/table[@class="playerstats lineups table"]/tbody/tr[%s]/td[@class="player large-link"]/a' % teamn)
        playerlink = [elem.get('href') for elem in playerh_link]

        PlayerAwayi.append(goal)
        PlayerAwayi.append(pg)
        PlayerAwayi.append(assis)
        PlayerAwayi.append(ET_goal)
        PlayerAwayi.append(og)
        PlayerAwayi.append(pm)
        PlayerAwayi.append(goal_t)
        PlayerAwayi.append(playerlink)
        #if goal > 0:
            #sa.write(teamn + 3, 5, goal)
        #sa.write(teamn + 3, 6, pg)
        #if assis > 0:
            #sa.write(teamn + 3, 7, assis)
        #sa.write(teamn + 3, 15, ET_goal)
        #sa.write(teamn + 3, 11, og)
        #sa.write(teamn + 3, 12, pm)
        #sa.write(teamn + 3, 14, ','.join(goal_t))
        PlayerAway.append(PlayerAwayi)

    # 主队替补
    SubHome = []
    subh_l = tree.xpath(
        '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container left"]/table[@class="playerstats lineups substitutions table"]/tbody/tr/td[@class="player large-link"]')
    #sh.write(17, 0, 'Sub Num')
    #sh.write(18, 0, len(subh_l))
    for subnh in range(1, len(subh_l) + 1):
        SubHomei = []
        # 球员
        playerh_s_a = tree.xpath('//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container left"]/table[@class="playerstats lineups substitutions table"]/tbody/tr[%s]/td[@class="player large-link"]/p[1]/a' % subnh)
        playerh_s = [elem.text_content().strip() for elem in playerh_s_a][0]
        numh_s_a = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container left"]/table[@class="playerstats lineups substitutions table"]/tbody/tr[%s]/td[@class="shirtnumber"]' % subnh)
        numh_s = ''.join([elem.text_content().strip() for elem in numh_s_a])
        if len(numh_s_a) != 0:
            SubHomei.append(int(numh_s))
        else:SubHomei.append('no number')
            #sh.write(subnh + 17, 1, int(numh_s))
        #sh.write(subnh + 17, 2, playerh_s.strip())
        SubHomei.insert(0,playerh_s.strip())
        # 事件
        span_t = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container left"]/table[@class="playerstats lineups substitutions table"]/tbody/tr[%s]/td[@class="bookings"]/span/img' % subnh)
        span_time = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container left"]/table[@class="playerstats lineups substitutions table"]/tbody/tr[%s]/td[@class="bookings"]/span' % subnh)
        span_t_all = [elem.get('src').split('/')[-1].split('.')[0] for elem in span_t]
        span_time_a = [elem.text_content().strip() for elem in span_time]
        goal = 0
        goal_t = []
        ET_goal = []
        pg = []
        og = []
        pm = []
        # 判断事件
        YCi = []
        Y2Ci = []
        RCi = []
        for j in range(0, len(span_t_all)):
            if span_t_all[j] == 'G' or span_t_all[j] == 'PG':
                goal += 1
                goal_t.append(span_time_a[j])
                if int(span_time_a[j].split('\'')[0].split('+')[0]) > 90:
                    ET_goal.append(span_time_a[j])
                    goal -= 1
            if span_t_all[j] == 'PG':
                pg.append(span_time_a[j])
            if span_t_all[j] == 'YC':
                YCi.append(span_time_a[j])
                #sh.write(subnh + 17, 8, span_time_a[j])
            if span_t_all[j] == 'Y2C':
                #sh.write(subnh + 17, 9, span_time_a[j])
                RCH.append(span_time_a[j])
                Y2Ci.append(span_time_a[j])
            if span_t_all[j] == 'RC':
                #sh.write(subnh + 17, 10, span_time_a[j])
                RCH.append(span_time_a[j])
                RCi.append(span_time_a[j])
            if span_t_all[j] == 'OG':
                og.append(span_time_a[j])
            if span_t_all[j] == 'PM':
                pm.append(span_time_a[j])
                PMH.append(span_time_a[j])
        SubHomei.append(YCi)
        SubHomei.append(Y2Ci)
        SubHomei.append(RCi)
        assis = 0
        for elem in ASH:
            if elem == playerh_s.strip():
                assis += 1



        #if goal > 0:
            #sh.write(subnh + 17, 5, goal)
        #sh.write(subnh + 17, 6, pg)
        #if assis > 0:
        #sh.write(subnh + 17, 7, assis)
        #sh.write(subnh + 17, 15, ET_goal)
        #sh.write(subnh + 17, 11, og)
        #sh.write(subnh + 17, 12, pm)
        #sh.write(subnh + 17, 14, ','.join(goal_t))
        SubHomei.append(goal)
        SubHomei.append(pg)
        SubHomei.append(assis)
        SubHomei.append(ET_goal)
        SubHomei.append(og)
        SubHomei.append(pm)
        SubHomei.append(goal_t)


        # 换人
        subout = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container left"]/table[@class="playerstats lineups substitutions table"]/tbody/tr[%s]/td[@class="player large-link"]/p[2]/a' % subnh)
        subout_a = [elem.text_content() for elem in subout]
        #sh.write(subnh + 17, 3, subout_a)
        SubHomei.append(subout_a)
        sub_t = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container left"]/table[@class="playerstats lineups substitutions table"]/tbody/tr[%s]/td[@class="player large-link"]/p[2]' % subnh)
        for elem in sub_t:
            sub_t_a = elem.text_content().split(' ')
            #sh.write(subnh + 17, 4, sub_t_a[-1])
            SubHomei.append(sub_t_a[-1])
            if int(sub_t_a[-1].split('\'')[0].split('+')[0]) <= 45:
                SubHomei.append(sub_t_a[-1])
            else:SubHomei.append('no early sub')
                #sh.write(subnh + 17, 13, sub_t_a[-1])



        # 球员链接
        playerh_link = tree.xpath('//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container left"]/table[@class="playerstats lineups substitutions table"]/tbody/tr[%s]/td[@class="player large-link"]/p[1]/a' % subnh)
        playerlink = [elem.get('href') for elem in playerh_link]
        SubHomei.append(playerlink)

        SubHome.append(SubHomei)

    # 客队替补
    SubAway = []
    subh_l = tree.xpath(
        '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container right"]/table[@class="playerstats lineups substitutions table"]/tbody/tr/td[@class="player large-link"]')
    #sa.write(17, 0, 'Sub Num')
    #sa.write(18, 0, len(subh_l))
    for subnh in range(1, len(subh_l) + 1):
        SubAwayi = []
        # 球员
        playerh_s_a = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container right"]/table[@class="playerstats lineups substitutions table"]/tbody/tr[%s]/td[@class="player large-link"]/p[1]/a' % subnh)
        playerh_s = [elem.text_content().strip() for elem in playerh_s_a][0]
        numh_s_a = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container right"]/table[@class="playerstats lineups substitutions table"]/tbody/tr[%s]/td[@class="shirtnumber"]' % subnh)
        numh_s = ''.join([elem.text_content().strip() for elem in numh_s_a])
        if len(numh_s_a) != 0:
            SubAwayi.append(int(numh_s))
        else:SubAwayi.append('no number')
            #sa.write(subnh + 17, 1, int(numh_s))
        #sa.write(subnh + 17, 2, playerh_s.strip())
        SubAwayi.insert(0,playerh_s.strip())
        # 事件
        span_t = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container right"]/table[@class="playerstats lineups substitutions table"]/tbody/tr[%s]/td[@class="bookings"]/span/img' % subnh)
        span_time = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container right"]/table[@class="playerstats lineups substitutions table"]/tbody/tr[%s]/td[@class="bookings"]/span' % subnh)
        span_t_all = [elem.get('src').split('/')[-1].split('.')[0] for elem in span_t]
        span_time_a = [elem.text_content().strip() for elem in span_time]
        goal = 0
        goal_t = []
        ET_goal = []
        pg = []
        og = []
        pm = []
        # 判断事件
        YCi = []
        Y2Ci = []
        RCi = []
        for j in range(0, len(span_t_all)):
            if span_t_all[j] == 'G' or span_t_all[j] == 'PG':
                goal += 1
                goal_t.append(span_time_a[j])
                if int(span_time_a[j].split('\'')[0][:1]) > 90:
                    ET_goal.append(span_time_a[j])
                    goal -= 1
            if span_t_all[j] == 'PG':
                pg.append(span_time_a[j])
            if span_t_all[j] == 'YC':
                #sa.write(subnh + 17, 8, span_time_a[j])
                YCi.append(span_time_a[j])
            if span_t_all[j] == 'Y2C':
                #sa.write(subnh + 17, 9, span_time_a[j])
                RCA.append(span_time_a[j])
                Y2Ci.append(span_time_a[j])
            if span_t_all[j] == 'RC':
                #sa.write(subnh + 17, 10, span_time_a[j])
                RCA.append(span_time_a[j])
                RCi.append(span_time_a[j])
            if span_t_all[j] == 'OG':
                og.append(span_time_a[j])
            if span_t_all[j] == 'PM':
                pm.append(span_time_a[j])
                PMA.append(span_time_a[j])
        SubAwayi.append(YCi)
        SubAwayi.append(Y2Ci)
        SubAwayi.append(RCi)
        assis = 0
        for elem in ASA:
            if elem == playerh_s.strip():
                assis += 1
        #if goal > 0:
            #sa.write(subnh + 17, 5, goal)
        #sa.write(subnh + 17, 6, pg)
        #if assis > 0:
            #sa.write(subnh + 17, 7, assis)
        #sa.write(subnh + 17, 15, ET_goal)
        #sa.write(subnh + 17, 11, og)
        #sa.write(subnh + 17, 12, pm)
        #sa.write(subnh + 17, 14, ','.join(goal_t))
        SubAwayi.append(goal)
        SubAwayi.append(pg)
        SubAwayi.append(assis)
        SubAwayi.append(ET_goal)
        SubAwayi.append(og)
        SubAwayi.append(pm)
        SubAwayi.append(goal_t)


        # 换人
        subout = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container right"]/table[@class="playerstats lineups substitutions table"]/tbody/tr[%s]/td[@class="player large-link"]/p[2]/a' % subnh)
        subout_a = [elem.text_content() for elem in subout]
        #sa.write(subnh + 17, 3, subout_a)
        SubAwayi.append(subout_a)
        sub_t = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container right"]/table[@class="playerstats lineups substitutions table"]/tbody/tr[%s]/td[@class="player large-link"]/p[2]' % subnh)
        for elem in sub_t:
            sub_t_a = elem.text_content().split(' ')
            SubAwayi.append(sub_t_a[-1])
            #sa.write(subnh + 17, 4, sub_t_a[-1])
            if int(sub_t_a[-1].split('\'')[0].split('+')[0]) <= 45:
                SubAwayi.append(sub_t_a[-1])
            else:SubAwayi.append('no early sub')
                #sa.write(subnh + 17, 13, sub_t_a[-1])

        # 球员链接
        playerh_link = tree.xpath(
            '//*[@id="yui-main"]/div/div/div[2]/div[@class="combined-lineups-container"]/div[@class="container right"]/table[@class="playerstats lineups substitutions table"]/tbody/tr[%s]/td[@class="player large-link"]/p[1]/a' % subnh)
        playerlink = [elem.get('href') for elem in playerh_link]
        SubAwayi.append(playerlink)

        SubAway.append(SubAwayi)

    #se.write(1, 0, ' '.join(PMH))
    #se.write(1, 8, ' '.join(PMA))
    RCH.sort()
    RCA.sort()
    TeamHome.append([LGH, PGH, OGH,PMH,RCH])
    TeamAway.append([LGA, PGA, OGA,PMA,RCA])
    #sh.write(1,9,len(RCH))
    #sa.write(1,9,len(RCA))
    #for i in range(0,len(RCH)):
        #sh.write(2,9+i,RCH[i])
    #for i in range(0,len(RCA)):
        #sa.write(2,9+i,RCA[i])


    #存储
    #wb.save(''.join(date_a.split('/'))+(' ')+team_s[0].strip()+' VS '+team_s[1].strip()+'.xls',)
    #print('Game:', team_s[0].strip(), ' VS ', team_s[1].strip(), ' @', date_a, ' saved')
    Game.append(str('Game:'+team_s[0].strip()+' VS '+team_s[1].strip()+ ' @'+ date_a+ ' saved'))
    GameEvent.append(Title)
    GameEvent.append(GoalEvent)
    TeamHome.append(PlayerHome)
    TeamHome.append(SubHome)
    TeamAway.append(PlayerAway)
    TeamAway.append(SubAway)
    Game.append(GameEvent)
    Game.append(TeamHome)
    Game.append(TeamAway)

    # 索引
    #Game：
    #0.'Game...saverd'
    #1.GameEvent:
     #1.0.Title:
      #1.0.0.队名[H,A]
      #1.0.1.日期[Date,Time]
      #1.0.2.赛事
      #1.0.3.场地和观众
      #1.0.4.比分：
       #1.0.4.0.Full time[H,A]
       #1.0.4.1.Half time[H,A]
       #1.0.4.2.Extra time[H,A]
       #1.0.4.3.Penalties[H,A]
     #1.1.GoalEvent[H,A],
        #1.1.(0,1).i.Each Goal of Each Team:
        #1.1.(0,1).i.0.Goal time
        #1.1.(0,1).i.1.Scorer
        #1.1.(0,1).i.2. OG/PG/Assist player/''
        #1.1.(0,1).i.3. score after goal
    #2.Team Home:
    #3.Team Away:
     #(2,3).0. 队名
     #(2,3).1. [LG,PG,OG,PM,RC]
     #(2,3).2.首发
        #(2,3).2.i.0.名字
        #(2,3).2.i.1.号码
        #.2.换下[]
        #.3.黄牌[]
        #.4.两黄变一红[]
        #.5.直接红牌[]
        #.6.Goal
        #.7.PG[]
        #.8.助攻
        #.9.加时进球[]
        #.10.OG[]
        #.11.踢丢点球[]
        #.12.Goal time[]
        #.13 球员链接
    #(2,3).3.替补
    # (2,3).3.i.0.名字
    # (2,3).3.i.1.号码
    # .2.黄牌[]
    # .3.两黄变一红[]
    # .4.直接红牌[]
    # .5.Goal
    # .6.PG[]
    # .7.助攻
    # .8.加时进球[]
    # .9.OG[]
    # .10.踢丢点球[]
    # .11.Goal time[]
    #.12 换下的球员（‘’）
    #.13 换人时间()
    #.14 Early Sub()
    #.15球员链接(b = #13)

    return Game


def list_to_elist(Game):
    x = Game
    elist = []

    for h in range(0,len(x)):
        match = [[],[]]
        #赛事信息
        info = [[],[]]
        for i in [0,1]:
            infoteam = []
            infoscore = []
            info[i].append(x[h][1][0][0][i])
            infoteam.append(x[h][1][0][0][i])
            infoteam.append(x[h][1][0][0][1-i])
            info[i].append(infoteam)
            info[i].append(x[h][1][0][1])
            info[i].append(x[h][1][0][2])
            info[i].append(x[h][1][0][3])
            infoscore.append(str(x[h][1][0][4][0][i])+'-'+str(x[h][1][0][4][0][1-i]))
            infoscore.append(x[h][1][0][4][1][i])
            if x[h][1][0][4][2] is list:
                infoscore.append(x[h][1][0][4][2][i])
            else:infoscore.append(x[h][1][0][4][2])
            if x[h][1][0][4][3] is list:
                infoscore.append(x[h][1][0][4][3][i])
            else:infoscore.append(x[h][1][0][4][3])
            info[i].append(infoscore)



        # 增加比分和时间的索引
        score_time = []
        score_score = []
        score_timea = []
        for i in [0,1]:
            for j in range(0,len(x[h][1][1][i])):
                score_time.append(x[h][1][1][i][j][0])
                score_score.append(x[h][1][1][i][j][3])
        for elem in score_time:
            if len(elem.split('+')) > 1:
                score_time_trans = int(elem.split('\'')[0]) + (int(elem.split('\'')[-1].split('+')[-1]) / 100)
            else: score_time_trans = int(elem.split('\'')[0])
            score_timea.append(score_time_trans)

        score_dic_l = []
        for elem in score_timea:
            score_dic_l.append([elem, score_score[score_timea.index(elem)]])
        score_dic_t = tuple(score_dic_l)
        score_dic = dict(score_dic_t)
        score_timea.sort()


        # 主客队比分
        score_all = [[],[]]
        for i in [0,1]:
            score = []
            score.append(x[h][1][0][4][0][i])
            #标注
            score_c = []
            #字体
            score_f = []
            #LG,OG,PG
            score_lop = []
            for j in range(0,len(x[h][1][1][i])):
                #进球之前的比分
                score_b = []
                score_b.insert(0, str(int(x[h][1][1][i][j][3].split('-')[i].strip()) - 1))
                score_b.insert(1, x[h][1][1][i][j][3].split('-')[1-i].strip())
                score_b.insert(1, '-')
                scorebefore = ''.join(score_b)
                #每个球判断是否LG,OG,PG
                if int(x[h][1][1][i][j][0].split('\'')[0].split('+')[0]) < 85:
                    if x[h][1][1][i][j][2] == 'OG':
                        score_lop.append('OG @ '+x[h][1][1][i][j][0]+' when '+scorebefore)
                    elif x[h][1][1][i][j][2] == 'PG':
                        score_lop.append('PG @ '+x[h][1][1][i][j][0]+' when '+scorebefore)
                elif int(x[h][1][1][i][j][0].split('\'')[0].split('+')[0]) <= 90:
                    if x[h][1][1][i][j][2] == 'OG':
                        score_lop.append('Late Goal & OG @ '+x[h][1][1][i][j][0]+' when '+scorebefore)
                    elif x[h][1][1][i][j][2] == 'PG':
                        score_lop.append('Late Goal & PG @ '+x[h][1][1][i][j][0]+' when '+scorebefore)
                    else:score_lop.append('Late Goal @ '+x[h][1][1][i][j][0]+' when '+scorebefore)



            #红牌
            score_r = []
            if len(x[h][i+2][1][4]) > 0:
                score_f.append('Red')
                for j in range(0,len(x[h][i+2][1][4])):
                    if len(x[h][i+2][1][4][j].split('+')) > 1:
                        red_time = int(x[h][i + 2][1][4][j].split('+')[0].split('\'')[0]) + (int(x[h][i + 2][1][4][j].split('+')[-1].split('\'')[0]) / 100)
                    else:red_time = int(x[h][i + 2][1][4][j].split('\'')[0])
                    score_timea.append(red_time)
                    score_timea.sort()
                    if score_timea.index(red_time) > 0:
                        red_score = score_dic[score_timea[score_timea.index(red_time)-1]]
                    else:
                        red_score = '0 - 0'
                    score_red = []
                    score_red.insert(0, red_score.split('-')[i].strip())
                    score_red.insert(1, red_score.split('-')[1 - i].strip())
                    score_red.insert(1, '-')
                    scorered = ''.join(score_red)
                    score_r.append(str(10-j)+' men @ '+x[h][i+2][1][4][j]+' when '+scorered)
                    score_timea.remove(red_time)

            else:score_f.append('No Red')
            if len(x[h][i + 2][1][4]) > 0:
                score_c.extend(score_r)

            #失点
            score_m = []
            if len(x[h][i+2][1][3]) > 0:
                for j in range(0,len(x[h][i+2][1][3])):
                    if len(x[h][i+2][1][3][j].split('+')) > 1:
                        pm_time = int(x[h][i + 2][1][3][j].split('+')[0].split('\'')[0]) + (int(x[h][i + 2][1][3][j].split('+')[-1].split('\'')[0]) / 100)
                    else:pm_time = int(x[h][i + 2][1][3][j].split('\'')[0])
                    score_timea.append(pm_time)
                    score_timea.sort()
                    if score_timea.index(pm_time) > 0:
                        pm_score = score_dic[score_timea[score_timea.index(pm_time)-1]]
                    else: pm_score = '0 - 0'
                    score_timea.remove(pm_time)
                    score_pm = []
                    score_pm.insert(0, pm_score.split('-')[i].strip())
                    score_pm.insert(1, pm_score.split('-')[1 - i].strip())
                    score_pm.insert(1, '-')
                    scorepm = ''.join(score_pm)
                    score_m.append('PK Missed @ '+x[h][i+2][1][3][j]+' when '+scorepm)
                score_c.extend(score_m)

            score_c.extend(score_lop)

            # 加时、点球大战
            if type(x[h][1][0][4][3]) == list:
                score_c.insert(0,'Penalties ' + x[h][1][0][4][3][i])
            if type(x[h][1][0][4][2]) == list:
                score_c.insert(0,'Extra Time ' + x[h][1][0][4][2][i])


            score.append(score_f)
            score.append(score_c)

            score_all[i].append(score)




        #主、客队球员
        player_all = [[],[]]
        for i in [0, 1]:
            player_team = []
            #换下球员
            subout = []
            earlysub = []
            for j in range(0, len(x[h][i + 2][3])):
                if len(x[h][i + 2][3][j]) > 14:
                    if x[h][i + 2][3][j][14] != 'no early sub':
                        subout.append([x[h][i + 2][3][j][12], x[h][i + 2][3][j][13]])
                        earlysub.append([x[h][i + 2][3][j][12], x[h][i + 2][3][j][13],[x[h][i + 2][3][j][0]]])
                    else:subout.append([x[h][i + 2][3][j][12],x[h][i + 2][3][j][13]])


            #首发球员
            starter = []
            for j in range(0,11):
                player = []
                player_x = ['X']
                player_f = []
                player_c = []
                #名字
                player.append(x[h][i+2][2][j][0])
                #换下
                if len(x[h][i+2][2][j][2]) > 0:
                    player_x.append('-')
                #红黄牌
                if len(x[h][i+2][2][j][5]) > 0:
                    player_f.append('R')
                    player_c.append('1R @ '+x[h][i+2][2][j][5][0])
                elif len(x[h][i+2][2][j][4]) > 0:
                    player_f.append('R')
                    player_c.append('2Y @ '+x[h][i+2][2][j][3][0] +','+ x[h][i+2][2][j][4][0])
                elif len(x[h][i+2][2][j][3]) > 0:
                    player_f.append('Y')
                else: player_f.append('')
                #进球、助攻
                if x[h][i + 2][2][j][6] > 0:
                    player_f.append('B')
                    player_x.append(str(x[h][i + 2][2][j][6]))
                    if x[h][i + 2][2][j][8] > 0:
                        player_c.append(str(x[h][i + 2][2][j][8])+'A')
                elif x[h][i + 2][2][j][8] > 0:
                    if x[h][i + 2][2][j][8] > 1:
                        player_x.append(str(x[h][i + 2][2][j][8]) + 'A')
                    else:
                        player_x.append('A')
                    player_f.append('')
                else:player_f.append('')

                #点球、乌龙、失点、加时
                if len(x[h][i+2][2][j][7]) > 0:
                    player_c.append('PG @ '+ ','.join(x[h][i+2][2][j][7]))
                if len(x[h][i+2][2][j][10]) > 0:
                    player_c.append('OG @ '+ ','.join(x[h][i+2][2][j][10]))
                if len(x[h][i+2][2][j][11]) > 0:
                    player_c.append('PK Missed @ '+ ','.join(x[h][i+2][2][j][11]))
                if len(x[h][i+2][2][j][9]) > 0:
                    player_c.append('Extra time Goal @ '+ ','.join(x[h][i+2][2][j][9]))
                #earlysub
                for elem in earlysub:
                    if x[h][i+2][2][j][0] == elem[0][0]:
                        player_c.insert(0,'Early Sub @ '+elem[1])




                player.append(player_x)
                player.append(player_f)
                player.append(player_c)
                player.append(x[h][i+2][2][j][13])
                starter.append(player)
            player_team.append(starter)

            # 替补球员
            sub_bench = []

            for j in range(0, len(x[h][i + 2][3])):
                player = []
                player_x = []
                player_f = []
                player_c = []
                # 名字
                player.append(x[h][i + 2][3][j][0])
                # 红黄牌
                if len(x[h][i + 2][3][j][4]) > 0:
                    player_f.append('R')
                    player_c.append('1R @ ' + x[h][i + 2][3][j][4][0])
                elif len(x[h][i + 2][3][j][3]) > 0:
                    player_f.append('R')
                    player_c.append('2Y @ ' + x[h][i + 2][3][j][2][0] + ',' + x[h][i + 2][3][j][3][0])
                elif len(x[h][i + 2][3][j][2]) > 0:
                    player_f.append('Y')
                else:
                    player_f.append('')
                # 进球、助攻
                if x[h][i + 2][3][j][5] > 0:
                    player_f.append('B')
                    player_x.append(str(x[h][i + 2][3][j][5]))
                    if x[h][i + 2][3][j][7] > 0:
                        player_c.append(str(x[h][i + 2][3][j][7]) + 'A')
                elif x[h][i + 2][3][j][7] > 0:
                    if x[h][i + 2][3][j][7] > 1:
                        player_x.append(str(x[h][i + 2][3][j][7]) + 'A')
                    else:
                        player_x.append('A')
                    player_f.append('')
                else:
                    player_f.append('')
                # 点球、乌龙、失点、加时
                if len(x[h][i + 2][3][j][6]) > 0:
                    player_c.append('PG @ ' + ','.join(x[h][i + 2][3][j][6]))
                if len(x[h][i + 2][3][j][9]) > 0:
                    player_c.append('OG @ ' + ','.join(x[h][i + 2][3][j][9]))
                if len(x[h][i + 2][3][j][10]) > 0:
                    player_c.append('PK Missed @ ' + ','.join(x[h][i + 2][3][j][10]))
                if len(x[h][i + 2][3][j][8]) > 0:
                    player_c.append('Extra time Goal @ ' + ','.join(x[h][i + 2][3][j][8]))
                #换上、bench、sub out
                if len(x[h][i + 2][3][j]) > 14:
                    playerlink = x[h][i + 2][3][j][15]
                    player_x.insert(0,'s')
                    player_f.append('')
                    #early sub on
                    for elem in earlysub:
                        if x[h][i + 2][3][j][0] == elem[2][0]:
                            player_x[0] = 'S'
                            player_f[2] = 'R'

                    #Sub Out
                    for elem in subout:
                        if x[h][i + 2][3][j][0] == elem[0][0]:
                            player_x[0] = 'S-'
                            player_f[2] = 'R'
                            player_c.insert(0, 'Sub out @ ' + elem[1])
                            for elem_2 in earlysub:
                                if x[h][i + 2][3][j][0] == elem_2[0][0]:
                                    player_c[0] = 'Sub Out & Early Sub @ ' + elem_2[1]
                else:
                    player_x.insert(0,'b')
                    player_f.append('b')
                    playerlink = x[h][i + 2][3][j][13]




                player.append(player_x)
                player.append(player_f)
                player.append(player_c)
                player.append(playerlink)
                sub_bench.append(player)
            player_team.append(sub_bench)

            #OG
            team_og = ['OG']
            og = 0
            if len(x[h][i + 2][1][2]) > 0:
                for elem in x[h][i + 2][1][2]:
                    if elem != '':
                        og += 1
            team_og.append(og)
            player_team.append(team_og)


            player_all[i].append(player_team)

        #数据分队
        for i in [0,1]:
            info[i].append(['H','A'][i])
            match[i].append(info[i])
            mathchscore = []
            mathchscore.extend(score_all[i])
            mathchscore.extend(score_all[1-i])
            match[i].append(mathchscore)
            match[i].extend(player_all[i])

        elist.extend(match)


    #索引
        # elist
        # [i]match
        # i.0 info
        # i.0.0.队名'str'
        # i.0.1.队名[Self,Opponent]
        # i.0.2.日期[Date,Time]
        # i.0.3.赛事'str'
        # i.0.4.场地和观众[球场，城市，观众数]
        # i.0.5.比分：
        # i.0.5.0.Full time(X-X)没空格
        # i.0.5.1.Half time(X - X)有空格
        # i.0.5.2.Extra time(X - X)有空格/('No Extra Time')
        # i.0.5.3.Penalties(X - X)有空格/('No Penalties')
        # i.0.6. 主客场['H'/'A']
        # i.1.[0,1] score[Self,Opponent]
        # i.1.[0,1].0 score(number)
        # i.1.[0,1].1 Font(红底'Red'/'No Red')
        # i.1.[0,1].2 score comments[]
        # i.2 player
        # i.2.0 starter
        # i.2.0.j  (0-10)
         # i.2.0.j.0 name
         # i.2.0.j.1 首发标记['X'(,'-')]
         # --.2 font[]
          # --.2.0 红黄底('R'/'Y'/'')
          # --.2.1 粗体('B'/'')
         # --.3 comment[]
         # i.2.0.j.4 球员链接
        # i.2.1 sub-bench
        # i.2.1.k (0- )
        # i.2.1.k.0 name
         # i.2.1.k.1 替补标记[]
         # --.2 font
         # --.2.0 红黄底('R'/'Y'/'')
          # --.2.1 粗体('B'/'')
          # --.2.2 bench/early sub out('b'/'R')
         # --.3 comment[]
         # i.2.1.k.4 球员链接
        # i.2.2 OG
        # i.2.2.0 'OG'
        # i.2.2.1 OG number

    return elist


def elist_to_excel(elist, PSparameter, teami):
    # excel待定参数设定
    sheetdict = {'Borussia Dortmund': 'Dortmund', 'Bayer Leverkusen': 'Leverkusen', 'Bayern München': 'Bayern_München',
                 'Werder Bremen': 'Werder_Bremen', 'Hoffenheim': 'Hoffenheim', 'Eintracht Frankfurt': 'Frankfurt',
                 'Freiburg': 'Freiburg',
                 'Augsburg': 'Augsburg', 'Hamburger SV': 'Hamburger', 'Hannover 96': 'Hannover_96',
                 'Mainz 05': 'Mainz_05',
                 'Stuttgart': 'Stuttgart', 'Hertha BSC': 'Hertha_BSC', 'RB Leipzig': 'RB_Leipzig',
                 'Schalke 04': 'Schalke_04', 'K?ln': 'Koln', "Borussia M'gladbach": 'M?nchengladbach',
                 'Wolfsburg': 'Wolfsburg','Macará':'Macará','Wanderers':'Wanderers','Olimpia':'Olimpia','Deportivo Táchira':'Deportivo_Táchira',
                 'Universitario':'Universitario','Oriente Petrolero':'Oriente_Petrolero','Bourg-en-Bresse':'Bourg_Peronnas','Reims':'Reims','Brest':'Brest','Lens':'Lens',
                 'Clermont':'Clermont','Lorient':'Lorient','Orléans':'Orléans','Auxerre':'Auxerre','Quevilly Rouen':'QuevillyRouen','Gazélec Ajaccio':'Gazélec_Ajaccio','Sochaux':'Sochaux',
                 'Nancy':'Nancy','Tours':'Tours','Niort':'Niort','Valenciennes':'Valenciennes','Le Havre':'Le_Havre','N?mes':'Nimes','Chateauroux':'Chateauroux',
                 'Paris':'Paris','Ajaccio':'Ajaccio','Independiente del Valle':'del_Valle'}

    workbookname = PSparameter[0]
    timecolumn = int(PSparameter[1])
    scorecolumn = int(PSparameter[2])
    playerrow = int(PSparameter[3])
    firstplayer = int(PSparameter[4])
    positionrow = int(PSparameter[5])
    agerow = int(PSparameter[6])
    timerow = int(PSparameter[7])
    psfont = PSparameter[8]
    psname = PSparameter[9]


    # excel名称，打开excel
    x = elist
    try:
        wb = xw.Book(workbookname)
    except:
        print('No This PS')
        workbookname = input('PS Name:')
        wb = xw.Book(workbookname)

    # sheet名称，打开sheet
    i = teami
    cp = configparser.ConfigParser()
    cp.read('PSconfig.conf')
    teamdict = dict(cp.items('Team'))
    if x[i][0][0] in sheetdict:
        sheetname = sheetdict[x[i][0][0]]
    #congfig读取
    elif x[i][0][0] in teamdict:
        sheetname = teamdict[x[i][0][0]]

    elif '_'.join(x[i][0][0].split(' ')) in sheetdict:
        sheetname = sheetdict['_'.join(x[i][0][0].split(' '))]
    else:
        sheetname = x[i][0][0]
    try:
        sheet = wb.sheets[sheetname]
        print('----------------------------')
        print(x[i][0][0])
        print('----------------------------')
        print(x[i][0][1:])
        sa = input('Any Word to Continue, "no" to Break:')
        if sa == 'no':
            return sheetname + ' Not Import'
    except:
        print('----------------------------')
        print(x[i][0][0])
        print('+++No This Team Sheet+++')
        print('----------------------------')
        sa = input('Sheet Added?(Enter to Break,Any Word to Continue)')
        if len(str(sa)) == 0:
            return x[i][0][0]+ ' Not Import'
        else:
            try:
                sheet = wb.sheets[sheetname]
            except:
                try:
                    sheetname = input('Input Sheet Name:')
                    sheet = wb.sheets[sheetname]
                    # 添加参数
                    update_psconfig('PSconfig.conf', 'Team', x[i][0][0], sheetname)
                except:
                    return x[i][0][0] + ' Not Import, Sheet Name Error'




    # 时间匹配
    k = timerow
    while True:
        GameDate = sheet.range(k, timecolumn).value
        try:
            int(GameDate.strftime('%Y'))
        except:
            if input('Time Out of Range(Blank Row or Wrong Time Formation)(Input "quit" to Skip This Team):') == 'quit':
                return sheetname + ' Not Import'
            else:
                k = timerow
            continue
        if int(GameDate.strftime('%Y')) > 2000:
            GameDateT = GameDate.strftime('%Y/%m/%d')
        else:
            GameDateT = str(int(GameDate.strftime('%Y')) + int(100)) + GameDate.strftime('/%m/%d')
        if datetime.datetime.strptime(GameDateT, '%Y/%m/%d').timestamp() > datetime.datetime.strptime(
                x[i][0][2][0], '%Y/%m/%d').timestamp():
            Rowk = k - 1
            break
        else:
            k += 1
    # 验证行标号
    print('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
    print('Row-1: ', sheet.range(Rowk - 1, timecolumn).value, ' ', sheetname, ' VS ',
          sheet.range((Rowk - 1, scorecolumn - 3), (Rowk - 1, scorecolumn + 1)).value)
    print('Row0: ', sheet.range(Rowk, timecolumn).value, ' ', sheetname, ' VS ',
          sheet.range((Rowk, scorecolumn - 3), (Rowk, scorecolumn + 1)).value)
    print('Row+1: ', sheet.range(Rowk + 1, timecolumn).value, ' ', sheetname, ' VS ',
          sheet.range((Rowk + 1, scorecolumn - 3), (Rowk + 1, scorecolumn + 1)).value)
    print('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
    timechange = input('Row Change(Input "ADD" to import new match)(Input "SKIP" to Skip this match) = ')
    print('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
    #添加新比赛
    if timechange !='':
        if timechange == 'ADD':
            Rowk = Rowk + 1
            sheet.range(str(Rowk) + ':' + str(Rowk)).api.Insert(InsertShiftDirection.xlShiftDown)
            sheet.range(Rowk,timecolumn).value = x[i][0][2][0]
            sheet.range(Rowk,scorecolumn - 3).value = x[i][0][1][1]
            sheet.range(Rowk,scorecolumn - 2).value = x[i][0][6]
            sheet.range(Rowk,scorecolumn - 1).value = x[i][0][3]
            print('----------------------------')
            input('Game Added?')
            print('----------------------------')
            input('Formula Copied & Color FIxed?')
            print('----------------------------')
        elif timechange == 'SKIP':
            return x[i][0][0] + ' Not Import'
        else:
            Rowk = Rowk + int(timechange)
    Rowkinfo = []
    for j in range(firstplayer, firstplayer + 50):
        if len(str(sheet.range(Rowk + 1, j).value)) > 0:
            Rowkinfo.append([sheet.range(playerrow, j).value, sheet.range(Rowk, j).value])
    if len(Rowkinfo) > 0:
        print('************************************************')
        print(Rowkinfo)
        print('************************************************')
    else:
        print('************************************************')
        print('no info')
    print('************************************************')

    # 填比分
    sheet.range(Rowk, scorecolumn).value = x[i][1][0][0]
    sheet.range(Rowk, scorecolumn + 1).value = x[i][1][1][0]
    if x[i][1][0][1][0] == 'Red':
        sheet.range(Rowk, scorecolumn).api.Interior.Color = 255
    else: sheet.range(Rowk, scorecolumn).api.Interior.ColorIndex = 0
    if x[i][1][1][1][0] == 'Red':
        sheet.range(Rowk, scorecolumn + 1).api.Interior.Color = 255
    else: sheet.range(Rowk, scorecolumn + 1).api.Interior.ColorIndex = 0
    if len(x[i][1][0][2]) > 0:
        try:
            sheet.range(Rowk, scorecolumn).api.AddComment('\n'.join(x[i][1][0][2]))
        except:
            sheet.range(Rowk, scorecolumn).api.Comment.Text('\n'.join(x[i][1][0][2]))
        sheet.range(Rowk, scorecolumn).api.Comment.Shape.TextFrame.Characters().Font.Bold = True
        sheet.range(Rowk, scorecolumn).api.Comment.Shape.TextFrame.Characters().Font.Name = 'Tahoma'
    if len(x[i][1][1][2]) > 0:
        try:
            sheet.range(Rowk, scorecolumn + 1).api.AddComment('\n'.join(x[i][1][1][2]))
        except:
            sheet.range(Rowk, scorecolumn + 1).api.Comment.Text('\n'.join(x[i][1][1][2]))
        sheet.range(Rowk, scorecolumn + 1).api.Comment.Shape.TextFrame.Characters().Font.Bold = True
        sheet.range(Rowk, scorecolumn + 1).api.Comment.Shape.TextFrame.Characters().Font.Name = 'Tahoma'


    #观众数量（德甲）
    for attcol in range(scorecolumn + 1,firstplayer):
        if sheet.range(playerrow, attcol).value == 'Attendance':
            sheet.range(Rowk, attcol).value = x[i][0][4][2]

    # Player List + Error Fix
    mvplist = {}
    while True:
        player = []
        for k in range(firstplayer, firstplayer + 100):
            player.append(sheet.range(playerrow, k).value)
         # 查找空列
        blank_n = firstplayer
        blank_a = 0
        while blank_a < 4:
            if sheet.range(playerrow, blank_n).value == None:
                blank_a += 1
            else: blank_a = 0
            blank_n += 1

        blank_c = blank_n - 3
        errorlist = []
        for l in x[i][2][0]:
            if l[0] not in player:
                print(l[0] + '-' + l[1][0] + ' not in ' + sheetname + ' Players')
                errorlist.append([l[0], l[4]])
        for l in x[i][2][1]:
            if l[0] not in player:
                print(l[0] + '-' + l[1][0] + ' not in ' + sheetname + ' Players')
                errorlist.append([l[0], l[4]])
        if x[i][2][2][1] > 0:
            if x[i][2][2][0] not in player:
                print('OG not in ' + sheetname + ' Players')
                errorlist.append([x[i][2][2][0], x[i][2][2][1]])
        if len(errorlist) == 0:
            break
        else:
            errorfix = []
            if len(str(input('Automatic Add Player?(Enter for Yes, Any Word for No):'))) ==0:
                for error in errorlist:
                    if error[0] == x[i][2][2][0]:
                        errorfix.append(['OG','',''])
                    else:
                        try:
                            error_pa = socway_player(error[1][0])
                            error_npa = [error[0]]
                            error_npa.extend(error_pa)
                            errorfix.append(error_npa)
                        except:
                            print('error in playerfix '+ error[0])
                for ef in errorfix:
                    sheet.range(playerrow, blank_c+errorfix.index(ef)).value = ef[0]
                    if positionrow != 0:
                        sheet.range(positionrow, blank_c+errorfix.index(ef)).value = ef[1]
                    if agerow != 0:
                        sheet.range(agerow, blank_c+errorfix.index(ef)).value = ef[2]
                input('Player Added?:')
            else:
                input('Player Added?:')



    # 球员
    # 首发
    for l in x[i][2][0]:
        if l[0] in player:
            print(sheetname + '-X' + str(x[i][2][0].index(l) + 1) + '-' + l[0])
            pcolumn = player.index(l[0]) + firstplayer
            sheet.range(Rowk, pcolumn).api.Font.Bold = False
            sheet.range(Rowk, pcolumn).api.Font.Italic = False
            sheet.range(Rowk, pcolumn).api.Font.ColorIndex = 1
            mvplist['X' + str(x[i][2][0].index(l) + 1)] = pcolumn
            sheet.range(Rowk, pcolumn).value = ''.join(l[1])
            #红黄牌背景颜色
            if l[2][0] == 'R':
                sheet.range(Rowk, pcolumn).api.Interior.Color = 255
            elif l[2][0] == 'Y':
                sheet.range(Rowk, pcolumn).api.Interior.Color = 65535
            else: sheet.range(Rowk, pcolumn).api.Interior.ColorIndex = 0
            #进球标粗
            if l[2][1] == 'B':
                sheet.range(Rowk, pcolumn).api.Font.Bold = True
            else:sheet.range(Rowk, pcolumn).api.Font.Bold = False
            if len(l[3]) > 0:
                try:
                    sheet.range(Rowk, pcolumn).api.AddComment('\n'.join(l[3]))
                except:
                    sheet.range(Rowk, pcolumn).api.Comment.Text('\n'.join(l[3]))
                sheet.range(Rowk, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Bold = True
                sheet.range(Rowk, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Name = 'Tahoma'
                # else:
                # print(l[0] + '-'+l[1][0]+' not in ' + sheetdict[x[i][0][0]]+' Players')
                # errorlist.append([sheetdict[x[i][0][0]], l[0], Rowk, l])
    # 替补
    for l in x[i][2][1]:
        if l[0] in player:
            print(sheetname + '-s' + str(x[i][2][1].index(l) + 1) + '-' + l[0])
            pcolumn = player.index(l[0]) + firstplayer
            sheet.range(Rowk, pcolumn).api.Font.Bold = False
            sheet.range(Rowk, pcolumn).api.Font.Italic = False
            sheet.range(Rowk, pcolumn).api.Font.ColorIndex = 1
            mvplist['s' + str(x[i][2][1].index(l) + 1)] = pcolumn
            sheet.range(Rowk, pcolumn).value = ''.join(l[1])
            #红黄牌背景颜色
            if l[2][0] == 'R':
                sheet.range(Rowk, pcolumn).api.Interior.Color = 255
            elif l[2][0] == 'Y':
                sheet.range(Rowk, pcolumn).api.Interior.Color = 65535
            else:sheet.range(Rowk, pcolumn).api.Interior.ColorIndex = 0
            if l[2][1] == 'B':
                sheet.range(Rowk, pcolumn).api.Font.Bold = True
            else:sheet.range(Rowk, pcolumn).api.Font.Bold = False
            if l[2][2] == 'R':
                if l[2][0] == 'R':
                    l[3].append('Early sub on')
                else:
                    sheet.range(Rowk, pcolumn).api.Font.Color = 255
            elif l[2][2] == 'b':
                sheet.range(Rowk, pcolumn).api.Font.Color = 12632256
            if len(l[3]) > 0:
                try:
                    sheet.range(Rowk, pcolumn).api.AddComment('\n'.join(l[3]))
                except:
                    sheet.range(Rowk, pcolumn).api.Comment.Text('\n'.join(l[3]))
                sheet.range(Rowk, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Bold = True
                sheet.range(Rowk, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Name = 'Tahoma'
                # else:
                # print(l[0] + '-'+l[1][0]+' not in ' + sheetdict[x[i][0][0]]+' Players')
                # errorlist.append([sheetdict[x[i][0][0]], l[0], Rowk, l])

    # 乌龙
    if x[i][2][2][1] > 0:
        if x[i][2][2][0] in player:
            print(x[i][2][2][0], '-', str(x[i][2][2][1]))
            pcolumn = player.index(x[i][2][2][0]) + firstplayer
            sheet.range(Rowk, pcolumn).value = x[i][2][2][1]
            sheet.range(Rowk, pcolumn).api.Font.Bold = True
            sheet.range(Rowk, pcolumn).api.Font.Italic = False
            sheet.range(Rowk, pcolumn).api.Font.ColorIndex = 1
            # else:
            # print('OG not in ' + sheetdict[x[i][0][0]]+' Players')
            # errorlist.append([sheetdict[x[i][0][0]], x[i][2][2][0], Rowk, x[i][2][2][1]])

    # 字体

    sheet.range((Rowk, firstplayer), (Rowk, firstplayer + 100)).api.Font.Name = psfont
    sheet.range((Rowk, firstplayer), (Rowk, firstplayer + 100)).api.Font.Size = 11
    sheet.range((Rowk, firstplayer), (Rowk, firstplayer + 100)).api.HorizontalAlignment = 3
    sheet.range((Rowk, firstplayer), (Rowk, firstplayer + 100)).api.VerticalAlignment = 2
    sheet.range((Rowk, firstplayer), (Rowk, firstplayer + 100)).number_format = 'G/通用格式'

    #MVP
    if psname == 'GSL':
        mvpgame = input('MVP NO.(Enter to Skip)(Example: "X1,X8,s2"):')
        if len(mvpgame) > 0:
            mvplist_g = mvpgame.split(',')
            count = 0
            while count < 2:
                try:
                    for mvp in mvplist_g:
                        sheet.range(Rowk, mvplist[mvp]).api.Font.Bold = True
                        sheet.range(Rowk, mvplist[mvp]).api.Font.Italic = True
                        sheet.range(Rowk, mvplist[mvp]).api.Font.Color = 255
                    break
                except:
                    print('MVP input error')
                    mvpgame = input('MVP NO.(Example: "X1,X8,s2"):')
                    count += 1

    return [sheetname + ' Imported',[sheet.name,Rowk]]


def socway_player(url):

    # 网址
    headers = {
        'User-Agent': "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"}
    all_url = 'https://int.soccerway.com/' + url
    html = requests.get(all_url, headers=headers)
    tree = lxml.html.fromstring(html.text)
    player_dt = tree.xpath(
        '//*[@id="page_player_1_block_player_passport_3"]/div/div/div[@class="yui-u first"]/div/dl/dt')
    player_dd = tree.xpath(
        '//*[@id="page_player_1_block_player_passport_3"]/div/div/div[@class="yui-u first"]/div/dl/dd')
    player_dt_t = [elem.text_content() for elem in player_dt]
    player_dd_t = [elem.text_content() for elem in player_dd]

    if 'Age' in player_dt_t:
        player_age = player_dd_t[player_dt_t.index('Age')]
    pos_dic = {'Goalkeeper':'GK','Defender':'D','Midfielder':'M','Attacker':'A'}
    if 'Position' in player_dt_t:
        player_pos = pos_dic[player_dd_t[player_dt_t.index('Position')]]
    return [player_pos,player_age]


def psparameter():
    PSpara = ['PS Name:', 'timecolumn:', 'scorecolumn:', 'playerrow:', 'firstplayer:','positionrow:','agerow:','timerow:','PSfont:','PSNAME:(SFL/FF2/GSL/LBC.....']
    cp = configparser.ConfigParser()
    cp.read('PSconfig.conf')
    PSlist = cp.sections()
    print('-------PS Parameter Update-------------')
    playersheet = input('Input Player Sheet Name:')
    if playersheet == 'end':
        return 'end'
    print('-----------------------------------')
    if playersheet in PSlist:
        PSdict = dict(cp.items(playersheet))
        PSpara[0] = PSdict['psbookname']
        PSpara[1] = PSdict['timecolumn']
        PSpara[2] = PSdict['scorecolumn']
        PSpara[3] = PSdict['playerrow']
        PSpara[4] = PSdict['firstplayer']
        PSpara[5] = PSdict['positionrow']
        PSpara[6] = PSdict['agerow']
        PSpara[7] = PSdict['timerow']
        PSpara[8] = PSdict['psfont']
        PSpara[9] = PSdict['psname']
    else:
        print('No This PS, Add New Config.')
        print('-----------------------------------')
        Psname = input('PSNAME:(SFL/FF2/GSL/LBC.....):')
        if Psname == 'end':
            return 'end'
        PSpara[0] = input('PS WorkBook Name:')
        PSpara[1] = input('timecolumn:')
        PSpara[2] = input('scorecolumn:')
        PSpara[3] = input('playerrow:')
        PSpara[4] = input('firstplayer:')
        PSpara[5] = input('positionrow:')
        PSpara[6] = input('agerow:')
        PSpara[7] = input('timerow:')
        PSpara[8] = input('PSfont:')
        PSpara[9] = Psname
        cp.read('PSconfig.conf')
        cp.add_section(Psname)
        cp.set(Psname,'psbookname',PSpara[0])
        cp.set(Psname,'timecolumn',PSpara[1])
        cp.set(Psname,'scorecolumn',PSpara[2])
        cp.set(Psname,'playerrow',PSpara[3])
        cp.set(Psname,'firstplayer',PSpara[4])
        cp.set(Psname,'positionrow',PSpara[5])
        cp.set(Psname,'agerow',PSpara[6])
        cp.set(Psname,'timerow',PSpara[7])
        cp.set(Psname,'psfont',PSpara[8])
        cp.set(Psname,'psname',PSpara[9])
        cp.write(open("PSconfig.conf", "w"))


    #GSL = ['GSL 2017-18.xlsm', 1, 11, 24, 33,23,'',26,'Calibri','GSL']
    #LBC = ['Playersheet LBC 2018.xlsx',1, 5, 21, 28, 19, 20, 23,'Arial','LBC']
    #FF2 = ['FF2 Playersheet_2017-18.xlsm',1, 6, 7, 28, 5, 0, 9,'Arial','FF2']
    #SFL = ['SFL_playersheet2017_2018.xlsm',1, 11, 7, 32, 5, '', 9,'Arial','SFL']
    #索引
    #workbookname = PSparameter[0]
    #timecolumn = PSparameter[1]
    #scorecolumn = PSparameter[2]
    #playerrow = PSparameter[3]
    #firstplayer = PSparameter[4]
    #positionrow = PSparameter[5]
    #agerow = PSparameter[6]
    #timerow = PSparameter[7]
    #psfont = PSparameter[8]
    #if textin == 'GSL':
        #PSpara = GSL
    #elif textin == 'LBC':
        #PSpara = LBC
    #elif textin == 'FF2':
        #PSpara = FF2
    #elif textin == 'SFL':
        #PSpara = SFL
    #else:



    return PSpara


def update_psconfig(config_file,dict,key,value):
    cp = configparser.ConfigParser()
    cp.read(config_file)
    try:
        cp.set(dict, key, value)
        cp.write(open(config_file, "w"))
    except:
        pass


def get_ff2dic():
    # 网址
    headers = {
        'User-Agent': "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"}
    html = requests.get('http://www.scoresway.com/?sport=soccer&page=competition&id=17', headers=headers)
    tree = lxml.html.fromstring(html.text)
    team = tree.xpath('//*[@id="block_competition_table_aa428595d48c2938e0502929a6b4a757_table"]/tbody/tr/td[@class="text team large-link"]/a')
    teamlink = list(map(lambda x:('http://www.scoresway.com/' + x.get('href')),team))
    teamname = list(map(lambda x:x.text_content(),team))
    ff2dic = {}
    for i in teamname:
        ff2dic[i] = teamlink[teamname.index(i)]
    print(teamlink)
    print(teamname)


def get_scoresway_1(url):
    #url = 'http://www.scoresway.com/?sport=soccer&page=team&id=900'
    # 网址
    headers = {
        'User-Agent': "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"}
    html = requests.get(url, headers=headers)
    tree = lxml.html.fromstring(html.text)
    teamaa = tree.xpath('//table[@class="matches   "]/tbody/tr/td[4]/a')
    teamba = tree.xpath('//table[@class="matches   "]/tbody/tr/td[6]/a')
    datea = tree.xpath('//table[@class="matches   "]/tbody/tr/td[2]')
    linka = tree.xpath('//table[@class="matches   "]/tbody/tr/td[5]/a')
    link = list(map(lambda x: ('http://www.scoresway.com/' + x.get('href')), linka))
    date = list(map(lambda x: x.text_content(), datea))
    teama = list(map(lambda x: x.get('title'), teamaa))
    teamb = list(map(lambda x: x.get('title'), teamba))
    gamelist = []
    for i in link:
        gamelist.append([date[link.index(i)],[teama[link.index(i)],teamb[link.index(i)]],i])
    return gamelist


def get_scoresway_2(urllist):
    #urllist = ['23/02/18', ['Tours', 'Orléans'], 'http://www.scoresway.com/?sport=soccer&page=match&id=2464794', '1-1']
    # 网址
    headers = {
        'User-Agent': "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"}
    html = requests.get(urllist[2], headers=headers)
    tree = lxml.html.fromstring(html.text)
    attacka = int(tree.xpath('//div[@class="stats_list"]/div[1]/div/span[@class="team_a"]/text()')[0])
    shba = int(tree.xpath('//div[@class="stats_list"]/div[7]/div/span[@class="team_a"]/text()')[0])
    shwa = int(tree.xpath('//div[@class="stats_list"]/div[10]/div/span[@class="team_a"]/text()')[0])
    shofa = int(tree.xpath('//div[@class="stats_list"]/div[8]/div/span[@class="team_a"]/text()')[0])
    shona = int(tree.xpath('//div[@class="stats_list"]/div[9]/div/span[@class="team_a"]/text()')[0])
    attackb = int(tree.xpath('//div[@class="stats_list"]/div[1]/div/span[@class="team_b"]/text()')[0])
    shbb = int(tree.xpath('//div[@class="stats_list"]/div[7]/div/span[@class="team_b"]/text()')[0])
    shwb = int(tree.xpath('//div[@class="stats_list"]/div[10]/div/span[@class="team_b"]/text()')[0])
    shofb = int(tree.xpath('//div[@class="stats_list"]/div[8]/div/span[@class="team_b"]/text()')[0])
    shonb = int(tree.xpath('//div[@class="stats_list"]/div[9]/div/span[@class="team_b"]/text()')[0])
    goalall = urllist[3].split('-')
    if urllist[4] == 'H':
        shota = shba + shwa + shofa + shona + int(goalall[0])
        shotb = shbb + shwb + shofb + shonb + int(goalall[1])
        shonta = shona + int(goalall[0])
        shontb = shonb + int(goalall[1])
        atta = attacka
        attb = attackb
    else:
        shota = shbb + shwb + shofb + shonb + int(goalall[0])
        shotb = shba + shwa + shofa + shona + int(goalall[1])
        shonta = shonb + int(goalall[0])
        shontb = shona + int(goalall[1])
        atta = attackb
        attb = attacka
    return [shota,shotb,shonta,shontb,atta,attb,shwa,shwb]


def ff2_shot_input(shot,sheetdata):
    # excel待定参数设定
    sheetdict = {'Borussia Dortmund': 'Dortmund', 'Bayer Leverkusen': 'Leverkusen',
                 'Bayern München': 'Bayern_München',
                 'Werder Bremen': 'Werder_Bremen', 'Hoffenheim': 'Hoffenheim', 'Eintracht Frankfurt': 'Frankfurt',
                 'Freiburg': 'Freiburg',
                 'Augsburg': 'Augsburg', 'Hamburger SV': 'Hamburger', 'Hannover 96': 'Hannover_96',
                 'Mainz 05': 'Mainz_05',
                 'Stuttgart': 'Stuttgart', 'Hertha BSC': 'Hertha_BSC', 'RB Leipzig': 'RB_Leipzig',
                 'Schalke 04': 'Schalke_04', 'K?ln': 'Koln', "Borussia M'gladbach": 'M?nchengladbach',
                 'Wolfsburg': 'Wolfsburg', 'Macará': 'Macará', 'Wanderers': 'Wanderers', 'Olimpia': 'Olimpia',
                 'Deportivo Táchira': 'Deportivo_Táchira',
                 'Universitario': 'Universitario', 'Oriente Petrolero': 'Oriente_Petrolero',
                 'Bourg-en-Bresse': 'Bourg_Peronnas', 'Reims': 'Reims', 'Brest': 'Brest', 'Lens': 'Lens',
                 'Clermont': 'Clermont', 'Lorient': 'Lorient', 'Orléans': 'Orléans', 'Auxerre': 'Auxerre',
                 'Quevilly Rouen': 'QuevillyRouen', 'Gazélec Ajaccio': 'Gazélec_Ajaccio', 'Sochaux': 'Sochaux',
                 'Nancy': 'Nancy', 'Tours': 'Tours', 'Niort': 'Niort', 'Valenciennes': 'Valenciennes',
                 'Le Havre': 'Le_Havre', 'N?mes': 'Nimes', 'Chateauroux': 'Chateauroux',
                 'Paris': 'Paris', 'Ajaccio': 'Ajaccio', 'Independiente del Valle': 'del_Valle'}
    PSparameter = ['FF2 Playersheet_2017-18.xlsm', 1, 6, 7, 28, 5, 0, 9, 'Arial', 'FF2']

    workbookname = PSparameter[0]
    timecolumn = int(PSparameter[1])
    scorecolumn = int(PSparameter[2])
    playerrow = int(PSparameter[3])
    firstplayer = int(PSparameter[4])
    positionrow = int(PSparameter[5])
    agerow = int(PSparameter[6])
    timerow = int(PSparameter[7])
    psfont = PSparameter[8]
    psname = PSparameter[9]

    # excel名称，打开excel
    try:
        wb = xw.Book(workbookname)
    except:
        print('No This PS')
        workbookname = input('PS Name:')
        wb = xw.Book(workbookname)
    sheet = wb.sheets[sheetdata[0]]
    Rowk = sheetdata[1]


    # 填比分
    sheet.range(Rowk, 18).value = shot[:6]
    if shot[6] > 0:
        try:
            sheet.range(Rowk, 20).api.AddComment(str(shot[6]))
        except:
            sheet.range(Rowk, 20).api.Comment.Text(str(shot[6]))
        sheet.range(Rowk, 20).api.Comment.Shape.TextFrame.Characters().Font.Bold = True
        sheet.range(Rowk, 20).api.Comment.Shape.TextFrame.Characters().Font.Name = 'Tahoma'
    if shot[7] > 0:
        try:
            sheet.range(Rowk, 21).api.AddComment(str(shot[7]))
        except:
            sheet.range(Rowk, 21).api.Comment.Text(str(shot[7]))
        sheet.range(Rowk, 21).api.Comment.Shape.TextFrame.Characters().Font.Bold = True
        sheet.range(Rowk, 21).api.Comment.Shape.TextFrame.Characters().Font.Name = 'Tahoma'
    # 字体

    sheet.range((Rowk, firstplayer), (Rowk, firstplayer + 100)).api.Font.Name = psfont
    sheet.range((Rowk, firstplayer), (Rowk, firstplayer + 100)).api.Font.Size = 11
    sheet.range((Rowk, firstplayer), (Rowk, firstplayer + 100)).api.HorizontalAlignment = 3
    sheet.range((Rowk, firstplayer), (Rowk, firstplayer + 100)).api.VerticalAlignment = 2
    sheet.range((Rowk, firstplayer), (Rowk, firstplayer + 100)).number_format = 'G/通用格式'

    print('------------------------------------')
    return sheet.name + ' Shot Imported'


def scoresway_main(Game,sheetdata):
    try:
        ff2dic = {'Ajaccio': 'http://www.scoresway.com/?sport=soccer&page=team&id=900',
                  'Auxerre': 'http://www.scoresway.com/?sport=soccer&page=team&id=888',
                  'Bourg-en-Bresse': 'http://www.scoresway.com/?sport=soccer&page=team&id=943',
                  'Brest': 'http://www.scoresway.com/?sport=soccer&page=team&id=922',
                  'Chateauroux': 'http://www.scoresway.com/?sport=soccer&page=team&id=913',
                  'Clermont': 'http://www.scoresway.com/?sport=soccer&page=team&id=916',
                  'Gazélec Ajaccio': 'http://www.scoresway.com/?sport=soccer&page=team&id=931',
                  'Le Havre': 'http://www.scoresway.com/?sport=soccer&page=team&id=912',
                  'Lens': 'http://www.scoresway.com/?sport=soccer&page=team&id=892',
                  'Lorient': 'http://www.scoresway.com/?sport=soccer&page=team&id=907',
                  'Nancy': 'http://www.scoresway.com/?sport=soccer&page=team&id=911',
                  'Niort': 'http://www.scoresway.com/?sport=soccer&page=team&id=909',
                  'N?mes': 'http://www.scoresway.com/?sport=soccer&page=team&id=932',
                  'Orléans': 'http://www.scoresway.com/?sport=soccer&page=team&id=5604',
                  'Paris': 'http://www.scoresway.com/?sport=soccer&page=team&id=2568',
                  'Quevilly Rouen': 'http://www.scoresway.com/?sport=soccer&page=team&id=3303',
                  'Reims': 'http://www.scoresway.com/?sport=soccer&page=team&id=921',
                  'Sochaux': 'http://www.scoresway.com/?sport=soccer&page=team&id=887',
                  'Tours': 'http://www.scoresway.com/?sport=soccer&page=team&id=935',
                  'Valenciennes': 'http://www.scoresway.com/?sport=soccer&page=team&id=933'}
        # 判断比赛队伍
        url1 = ff2dic[Game[0][0]]
        # 从队伍页面寻找比赛场次
        teams = Game[0][1]
        teams.remove(Game[0][0])
        teamop = teams[0]
        gamelist = get_scoresway_1(url1)
        urllist = []

        for i in gamelist:
            if teamop in i[1]:
                urllist.append(i)
        print('-----------------Update Shot From Scoresway----------------')
        for i in urllist:
            i.append(Game[0][5][0])
            i.append(Game[0][6])
            print('NO.', urllist.index(i), i)
        print('-----------------------------------------------------------')
        x = input('Which Game is Right?(Enter to Continue):')
        if x == '':
            x = 0

        shotdata = get_scoresway_2(urllist[x])
        result = ff2_shot_input(shotdata, sheetdata)
        return result

    except:
        print('---------------------------------')
        return Game[0][0] + '--Shot Data Update Error'


def socway_download():
    print('***Soccerway Update***')
    soccerwayurl = input('Input Url:')
    if soccerwayurl == 'end':
        return 'end'
    x = sow_matchs(soccerwayurl)
    Game = list_to_elist(x)
    print(Game[0][0][3])
    try:
        if Game[0][0][3] == 'Ligue 2':
            print('-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+')
            print(Game[0][0][3])
            PSparas = ['FF2 Playersheet_2017-18.xlsm', 1, 6, 7, 28, 5, 0, 9, 'Arial', 'FF2']
            for teami in range(0, len(Game)):
                result = elist_to_excel(Game, PSparas, teami)
                print(result)
                sheetdata = result[1]
                print(scoresway_main(Game[teami], sheetdata))
        else:
            if Game[0][0][3] == 'Bundesliga':
                PSparas = ['GSL 2017-18.xlsm', 1, 11, 24, 33, 23, 0, 26, 'Calibri', 'GSL']
                print('-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+')
                print(Game[0][0][3])
            elif Game[0][0][3] == 'Eliteserien':
                PSparas = ['Norway_2018.xlsm', 1, 10, 20, 24, 18, 19, 23, 'Arial', 'NTL']
                print('-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+')
                print(Game[0][0][3])
            else:
                PSparas = psparameter()
            for teami in range(0, len(Game)):
                print(elist_to_excel(Game, PSparas, teami))
    except Exception as inst:
        print(type(inst))
        print(inst.args)
        print('-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+')
        PSparas = psparameter()
        for teami in range(0, len(Game)):
            print(elist_to_excel(Game, PSparas, teami))


    return 'Finished'


def soccerway_main():
    while True:
        try:
            x = socway_download()
            if x == 'end':
                break
            print('------------------------------------------------')
            print('Finished')
            print('------------------------------------------------')
        except Exception as inst:
            print(type(inst))
            print(inst.args)
            continue


#------------------------------------
#获取的比赛时间受时区影响会差一天#部分修正（信息中有时间的）
#------------------------------------


def sow_gamedate(url,PSparameter):
    # 网址
    headers = {
        'User-Agent': "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"}
    html = requests.get(url, headers=headers)
    tree = lxml.html.fromstring(html.text)
    times_a = tree.xpath(
        '//td[@class="full-date"]/../td[@class="full-date"] ')
    times_b = tree.xpath(
        '//td[@class="full-date"]/../td[5] ')
    times_c = tree.xpath(
        '//td[@class="full-date"]/../td[5]/a ')
    comp_a = tree.xpath(
        '//td[@class="full-date"]/../td[@class="competition"]/a ')
    ta_a = tree.xpath(
        '//td[@class="full-date"]/../td[@class="team team-a "]/a ')
    tb_a = tree.xpath(
        '//td[@class="full-date"]/../td[@class="team team-b "]/a ')
    times = [elem.text_content() for elem in times_a]
    comp = [elem.text_content() for elem in comp_a]
    ta = [elem.get('title') for elem in ta_a]
    tb = [elem.get('title') for elem in tb_a]
    timeb = [elem.get('class') for elem in times_b]
    timec = [elem.text_content().strip() for elem in times_c]

    #筛选时间
    games = []
    print('------------------------------------------------')
    dateinput = input('StartDate(YYYY,MM,DD)(or Enter):')
    end_d_input = input('EndDate(YYYY,MM,DD)(or Enter):')
    print('------------------------------------------------')
    if len(dateinput) == 0:
        dateout = [2000,1,1]
    else:
        dateout = [int(elem) for elem in dateinput.split(',')]
    if len(end_d_input) == 0:
        end_d_out = [2050,1,1]
    else:
        end_d_out = [int(elem) for elem in end_d_input.split(',')]
    for i in times:
        n = times.index(i)
        game = [i,comp[n],[ta[n],tb[n]]]
        trans_date = datetime.datetime.strptime(i, '%d/%m/%y')
        if trans_date.timestamp() > datetime.datetime(dateout[0],dateout[1],dateout[2]).timestamp():
            if trans_date.timestamp() < datetime.datetime(end_d_out[0],end_d_out[1],end_d_out[2]).timestamp():
                if timeb[n] == 'score-time status':
                    try :
                        gamedate = datetime.datetime.strptime(i + timec[n], '%d/%m/%y%H : %M')
                        gamedate_cn = gamedate + datetime.timedelta(hours=7)
                        gamedateout = gamedate_cn.strftime('%d/%m/%y')
                        game[0] = gamedateout
                    except:
                        pass

                games.append(game)

    #队名判断
    team = ''
    for i in [0,1]:
        if games[0][2][i] in games[1][2]:
            if games[0][2][i] in games[2][2]:
                if games[0][2][i] in games[3][2]:
                    team = games[0][2][i]
    if team == '':
        team = input('Input Team Name:')
        print('------------------------------------------------')

    #联赛判断
    competition = []
    for i in games:
        competition.append(i[1])
    compet = list(set(competition))

    for j in compet:
        print('NO.',compet.index(j),' ',j)
    print('------------------------------------------------')
    comp_bn = input('Competition That Bold(NO. with ","):').split(',')
    comp_rn = input('Competition That Red(NO. with ","):').split(',')
    print('------------------------------------------------')

    if comp_bn[0] != '':
        comp_b = [compet[int(k)] for k in comp_bn]
    else:
        comp_b = compet
    if comp_rn[0] != '':
        comp_r = [compet[int(k)] for k in comp_rn]
    else:
        comp_r = []



    #整理数据
    gamesin = []
    for i in games:
        gamein = ['date','opponent team','H/A','comp']
        gamein[0] = i[0]
        if i[2].index(team) == 0:
            gamein[2] = 'H'
        else:
            gamein[2] = 'A'
        i[2].remove(team)
        gamein[1] = i[2][0]
        gamein[3] = i[1]
        gamesin.append(gamein)

    # excel待定参数设定
    sheetdict = {'Borussia Dortmund': 'Dortmund', 'Bayer Leverkusen': 'Leverkusen', 'Bayern München': 'Bayern_München',
                 'Werder Bremen': 'Werder_Bremen', 'Hoffenheim': 'Hoffenheim', 'Eintracht Frankfurt': 'Frankfurt',
                 'Freiburg': 'Freiburg',
                 'Augsburg': 'Augsburg', 'Hamburger SV': 'Hamburger', 'Hannover 96': 'Hannover_96',
                 'Mainz 05': 'Mainz_05',
                 'Stuttgart': 'Stuttgart', 'Hertha BSC': 'Hertha_BSC', 'RB Leipzig': 'RB_Leipzig',
                 'Schalke 04': 'Schalke_04', 'K?ln': 'Koln', "Borussia M'gladbach": 'M?nchengladbach',
                 'Wolfsburg': 'Wolfsburg','Macará':'Macará','Wanderers':'Wanderers','Olimpia':'Olimpia','Deportivo Táchira':'Deportivo_Táchira',
                 'Universitario':'Universitario','Oriente Petrolero':'Oriente_Petrolero','Bourg-en-Bresse':'Bourg_Peronnas','Reims':'Reims','Brest':'Brest','Lens':'Lens',
                 'Clermont':'Clermont','Lorient':'Lorient','Orléans':'Orléans','Auxerre':'Auxerre','Quevilly Rouen':'QuevillyRouen','Gazélec Ajaccio':'Gazélec_Ajaccio','Sochaux':'Sochaux',
                 'Nancy':'Nancy','Tours':'Tours','Niort':'Niort','Valenciennes':'Valenciennes','Le Havre':'Le_Havre','N?mes':'Nimes','Chateauroux':'Chateauroux',
                 'Paris':'Paris','Ajaccio':'Ajaccio','Independiente del Valle':'del_Valle'}
    workbookname = PSparameter[0]
    timecolumn = int(PSparameter[1])
    scorecolumn = int(PSparameter[2])
    playerrow = int(PSparameter[3])
    firstplayer = int(PSparameter[4])
    positionrow = int(PSparameter[5])
    agerow = int(PSparameter[6])
    timerow = int(PSparameter[7])
    psfont = PSparameter[8]
    psname = PSparameter[9]


    # excel、sheet
    cp = configparser.ConfigParser()
    cp.read('PSconfig.conf')
    teamdict = dict(cp.items('Team'))
    print('Team Name: ' + team)
    try:
        wb = xw.Book(workbookname)
    except:
        print('No This PS')
        workbookname = input('PS Name:')
        wb = xw.Book(workbookname)
    try:
        if team in sheetdict:
            sheet = wb.sheets[sheetdict[team]]
        # congfig读取
        elif team in teamdict:
            sheet = wb.sheets[teamdict[team]]
        elif '_'.join(team.split(' ')) in teamdict:
            sheet = wb.sheets[teamdict['_'.join(team.split(' '))]]
        else:
            sheet = wb.sheets[team]
    except:
        sheetname = input('SheetName:')
        sheet = wb.sheets[sheetname]
        # 添加参数
        update_psconfig('PSconfig.conf', 'Team', team, sheetname)

    rowinput = input('start row:')
    if rowinput != '':
        timerow = int(rowinput)

    #写入Excel
    for i in gamesin:
        print(i)
        r = gamesin.index(i)
        sheet.range(timerow + r, timecolumn).number_format = 'dd/mm/yy'
        sheet.range(timerow + r, timecolumn).value = datetime.datetime.strptime(i[0], '%d/%m/%y')
        sheet.range(timerow + r, scorecolumn - 3).value = i[1]
        sheet.range(timerow + r, scorecolumn - 2).value = i[2]
        sheet.range(timerow + r, scorecolumn - 1).value = i[3]
        #Bold,Red
        if i[3] in comp_b:
            sheet.range((timerow + r, timecolumn),(timerow + r, scorecolumn + 1)).api.Font.Bold = True
        else:
            sheet.range((timerow + r, timecolumn), (timerow + r, scorecolumn + 1)).api.Font.Bold = False
        if i[3] in comp_r:
            sheet.range((timerow + r, timecolumn), (timerow + r, scorecolumn - 1)).api.Font.Color = 255
        else:
            sheet.range((timerow + r, timecolumn), (timerow + r, scorecolumn - 1)).api.Font.ColorIndex = 1


    return 'Finished'


def ps_gamedate():
    # 网址
    print('----------Game Date Update---------------')
    url = input('Url of matches:')
    if url == 'end':
        return 'end'
    # 写入PS
    PSparas = psparameter()
    sow_gamedate(url, PSparas)


def gamedate():
    while True:
        try:
            x = ps_gamedate()
            if x == 'end':
                break
            print('------------------------------------------------')
            print('Finished')
            print('------------------------------------------------')
        except Exception as inst:
            print(type(inst))
            print(inst.args)
            continue


#-------------------------------------------
#2017.12.01之前转入的球员未算在转入球员内
#-------------------------------------------


def transm_team(url):
    headers = {
        'User-Agent': "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"}
    html = requests.get(url, headers=headers)
    tree = lxml.html.fromstring(html.text)


    # 读取数据
    player_num = len(tree.xpath('//*[@id="yw1"]/table/tbody/tr'))
    team = {}
    for i in range(1, player_num + 1):
        # 名字，位置，年龄
        player = tree.xpath('//*[@id="yw1"]/table/tbody/tr[%d]/td[2]/table/tr[1]/td[2]/div[1]/span/a/text()' % i)[0]
        position = tree.xpath('//*[@id="yw1"]/table/tbody/tr[%d]/td[2]/table/tr[2]/td/text()' % i)[0]
        age = tree.xpath('//*[@id="yw1"]/table/tbody/tr[%d]/td[3]/text()' % i)[0]
        j = player.split(' ')
        if len(j)>1:
            jl = j[-1]
            jf = j[-2][0]
            jn = jf + '. ' + jl
        else:
            jn = player

        #print(player, '-', jn, '-', position, '-', age.split('(')[-1][:-1])
        # 转入
        trans_ele = tree.xpath('//*[@id="yw1"]/table/tbody/tr[%d]/td[2]/a' % i)
        if len(trans_ele) > 0:
            trans_all = trans_ele[0].get('title')
            trans = trans_all.split(':')
            trans_club = 'Trans From ' + trans[1].split(';')[0]
            loan = trans[0][:3]
            # 转会时间判断
            try:
                trans_date_a = tree.xpath('//*[@id="yw1"]/table/tbody/tr[%d]/td[7]/text()' % i)[0]
                trans_date_b = datetime.datetime.strptime(trans_date_a, '%b %d, %Y')
                if trans_date_b.timestamp() > datetime.datetime(2017, 12, 1).timestamp():
                    trans_date = trans_date_b.strftime('%Y/%m/%d')
                    # 识别租借
                    if loan == 'Loa':
                        trans_club = 'Loan From ' + trans[1].split(';')[0]
                else:
                    trans_club = ''
                    trans_date = ''
            except:
                trans_club = ''
                trans_date = ''
        else:
            trans_club = ''
            trans_date = ''
        team[player] = [player,jn,position,age.split('(')[-1][:-1],trans_club,trans_date]
    return team


def transm_inout(url):
    headers = {
        'User-Agent': "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"}
    html = requests.get(url, headers=headers)
    tree = lxml.html.fromstring(html.text)


    # 读取数据--转入
    div_num = tree.xpath('//*[@id="main"]/div[10]/div/div')
    div_in = len(div_num) - 1
    player_num = len(tree.xpath('//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr'%div_in))
    trans_in = []
    for i in range(1, player_num + 1):
        # 名字，位置，年龄
        player = tree.xpath('//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr[%d]/td[2]/table/tr[1]/td[2]/a/text()' % (div_in,i))[0]
        trans_in.append(player)


    #print(trans_in)
    # 读取数据--转出
    div_out = len(div_num)
    player_num = len(tree.xpath('//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr'%div_out))
    trans_out = {}
    for i in range(1, player_num + 1):
        # 名字，位置，年龄
        player = tree.xpath('//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr[%d]/td[2]/table/tr[1]/td[2]/a/text()'%(div_out,i))[0]
        #print(player)
        if player not in trans_in:
            position = tree.xpath('//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr[%d]/td[2]/table/tr[2]/td/text()' %(div_out,i))[0]
            age = tree.xpath('//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr[%d]/td[3]/text()' %(div_out,i))[0]
            j = player.split(' ')
            if len(j) > 1:
                jl = j[-1]
                jf = j[-2][0]
                jn = jf + '. ' + jl
            else:
                jn = player

            trans_out[player] = [player, jn, position, age, 'Out', '']
    print(trans_out)
    return trans_out


def transm_to_excel(team,PSparameter):
    # excel待定参数设定
    sheetdict = {'Borussia Dortmund': 'Dortmund', 'Bayer Leverkusen': 'Leverkusen', 'Bayern München': 'Bayern_München',
                 'Werder Bremen': 'Werder_Bremen', 'Hoffenheim': 'Hoffenheim', 'Eintracht Frankfurt': 'Frankfurt',
                 'Freiburg': 'Freiburg',
                 'Augsburg': 'Augsburg', 'Hamburger SV': 'Hamburger', 'Hannover 96': 'Hannover_96',
                 'Mainz 05': 'Mainz_05',
                 'Stuttgart': 'Stuttgart', 'Hertha BSC': 'Hertha_BSC', 'RB Leipzig': 'RB_Leipzig',
                 'Schalke 04': 'Schalke_04', 'K?ln': 'Koln', "Borussia M'gladbach": 'M?nchengladbach',
                 'Wolfsburg': 'Wolfsburg','Macará':'Macará','Wanderers':'Wanderers','Olimpia':'Olimpia','Deportivo Táchira':'Deportivo_Táchira',
                 'Universitario':'Universitario','Oriente Petrolero':'Oriente_Petrolero','Bourg-en-Bresse':'Bourg_Peronnas','Reims':'Reims','Brest':'Brest','Lens':'Lens',
                 'Clermont':'Clermont','Lorient':'Lorient','Orléans':'Orléans','Auxerre':'Auxerre','Quevilly Rouen':'QuevillyRouen','Gazélec Ajaccio':'Gazélec_Ajaccio','Sochaux':'Sochaux',
                 'Nancy':'Nancy','Tours':'Tours','Niort':'Niort','Valenciennes':'Valenciennes','Le Havre':'Le_Havre','N?mes':'Nimes','Chateauroux':'Chateauroux',
                 'Paris':'Paris','Ajaccio':'Ajaccio','Independiente del Valle':'del_Valle'}

    positiondic = {'Keeper':'GK','Defender':'D','Centre-Back':'CB','Left-Back':'LB','Right-Back':'RB','Midfield':'M','Midfielder':'M',
                   'Defensive Midfield':'DM','Central Midfield':'CM','Right Midfield':'RM','Left Midfield':'LM','Attacking Midfield':'AM',
                   'Left Wing': 'LW', 'Right Wing':'RW','Secondary Striker':'SS','Striker':'A','Centre-Forward':'CF'}

    workbookname = PSparameter[0]
    timecolumn = int(PSparameter[1])
    scorecolumn = int(PSparameter[2])
    playerrow = int(PSparameter[3])
    firstplayer = int(PSparameter[4])
    positionrow = int(PSparameter[5])
    agerow = int(PSparameter[6])
    timerow = int(PSparameter[7])
    psfont = PSparameter[8]
    psname = PSparameter[9]

    # excel、sheet
    try:
        wb = xw.Book(workbookname)
    except:
        print('No This PS')
        workbookname = input('PS Name:')
        wb = xw.Book(workbookname)

    sheetname = input('SheetName:')
    sheet = wb.sheets[sheetname]

    # 查找空列
    blank_n = firstplayer
    blank_a = 0
    while blank_a < 4:
        if sheet.range(playerrow, blank_n).value == None:
            blank_a += 1
        else:
            blank_a = 0
        blank_n += 1

    blank_c = blank_n - 3

    #输入球员
    player_num = []
    for player in team:
        player_num.append(player)

    for player in team:
        print(team[player])
        pcolumn = blank_c + player_num.index(player)
        if psname == 'SFL':
            sheet.range(playerrow,pcolumn).value = team[player][0]
        else:
            sheet.range(playerrow,pcolumn).value = team[player][1]

        sheet.range(playerrow, pcolumn).api.Font.ColorIndex = 1
        if positionrow != 0:
            if team[player][2] in positiondic:
                sheet.range(positionrow, pcolumn).value = positiondic[team[player][2]]
            else:
                sheet.range(positionrow, pcolumn).value = team[player][2]
        if agerow != 0:
            sheet.range(agerow, pcolumn).value = team[player][3]
        #转会信息
        if team[player][5] != '':
            try:
                sheet.range(playerrow, pcolumn).api.AddComment(team[player][4]+' since '+team[player][5])
                sheet.range(playerrow, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Bold = True
                sheet.range(playerrow, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Name = 'Tahoma'
            except:
                sheet.range(playerrow, pcolumn).api.Comment.Text(team[player][4]+' since '+team[player][5])

            sheet.range(playerrow, pcolumn).api.Interior.Color = 10213316
        elif team[player][4] == 'Out':
            sheet.range(playerrow, pcolumn).api.Interior.Color = 12566463
        else:
            sheet.range(playerrow, pcolumn).api.Interior.ColorIndex = 0

    return sheetname + ' Player Imported'


def ps_transmkt():
    # 网址
    print('---------Team Member Update-------------')
    url1 = input('Url of TeamList:')
    if url1 == 'end':
        return 'end'
    url2 = input('Url of TransferList:')
    print('------------------------------------------------')
    # team加入转出球员
    team = transm_team(url1)
    trout = transm_inout(url2)
    #print(team)
    #print(trout)
    for player in trout:
        team[player] = trout[player]
    #print(team)
    # 写入PS
    print('------------------------------------------------')
    PSparas = psparameter()
    print('------------------------------------------------')
    transm_to_excel(team, PSparas)


def transmarket():
    while True:
        try:
            x = ps_transmkt()
            if x == 'end':
                break
            print('------------------------------------------------')
            print('Finished')
            print('------------------------------------------------')
        except Exception as inst:
            print(type(inst))
            print(inst.args)
            continue



#-------------------------------------------
#2018冬窗转会
#-------------------------------------------


def transw_inout(url):
    headers = {
        'User-Agent': "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"}
    html = requests.get(url, headers=headers)
    tree = lxml.html.fromstring(html.text)

    # 读取数据--转入
    div_num = tree.xpath('//*[@id="main"]/div[10]/div/div')
    div_in = len(div_num) - 1
    player_num = len(tree.xpath('//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr'%div_in))
    trans_in = {}
    print('--------------------------IN--------------------------')
    for i in range(1, player_num + 1):
        # 名字，位置，年龄
        player = tree.xpath(
            '//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr[%d]/td[2]/table/tr[1]/td[2]/a/text()' % (
            div_in, i))[0]
        playerlink = 'https://www.transfermarkt.com' + tree.xpath(
            '//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr[%d]/td[2]/table/tr[1]/td[2]/a' % (div_in, i))[
            0].get('href')
        j = player.split(' ')
        if len(j) > 1:
            jl = j[-1]
            jf = j[0][0]
            jn = jf + '. ' + jl
        else:
            jn = player
        #print(player)
        #print(playerlink)
        position = tree.xpath(
            '//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr[%d]/td[2]/table/tr[2]/td/text()' % (div_in, i))[
            0]
        age = tree.xpath('//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr[%d]/td[3]/text()' % (div_in, i))[0]
        # 转出俱乐部
        club = tree.xpath(
            '//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr[%d]/td[6]/table/tr[1]/td[@class="hauptlink"]/a/text()' % (
            div_in, i))[0]
        #print(club)
        # 转会方式
        fee = tree.xpath('//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr[%d]/td[7]/a/text()' % (div_in, i))[0]
        #print(fee)
        #转会日期
        dhtml = requests.get(playerlink, headers=headers)
        dtree = lxml.html.fromstring(dhtml.text)
        tteam = dtree.xpath('//*[@class="zeile-transfer"]/td[6]/a/text()')
        tindex = tteam.index(club)
        tdate = dtree.xpath('//*[@class="zeile-transfer"]/td[2]/text()')[tindex]
        #pprint.pprint(tdate)
        # 球员列表
        trans_in[player] = [player, jn, position, age, club, fee, tdate, playerlink]
        print(player + ' Finished')

    #pprint.pprint(trans_in)




    # 读取数据--转出
    div_out = len(div_num)
    player_num = len(tree.xpath('//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr'%div_out))
    trans_out = {}
    print('--------------------------OUT--------------------------')
    for i in range(1, player_num + 1):
        # 名字，位置，年龄
        player = tree.xpath('//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr[%d]/td[2]/table/tr[1]/td[2]/a/text()'%(div_out,i))[0]
        playerlink = 'https://www.transfermarkt.com' + tree.xpath('//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr[%d]/td[2]/table/tr[1]/td[2]/a'%(div_out,i))[0].get('href')
        j = player.split(' ')
        if len(j) > 1:
            jl = j[-1]
            jf = j[0][0]
            jn = jf + '. ' + jl
        else:
            jn = player
        #print(player)
        #print(playerlink)
        position = tree.xpath(
            '//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr[%d]/td[2]/table/tr[2]/td/text()' % (div_out, i))[
            0]
        age = tree.xpath('//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr[%d]/td[3]/text()' % (div_out, i))[0]
        #转出俱乐部
        club = tree.xpath('//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr[%d]/td[6]/table/tr[1]/td[@class="hauptlink"]/a/text()'%(div_out,i))[0]
        #print(club)
        #转会方式
        fee = tree.xpath('//*[@id="main"]/div[10]/div/div[%d]/div[3]/table/tbody/tr[%d]/td[7]/a/text()'%(div_out,i))[0]
        #print(fee)
        #转会日期
        dhtml = requests.get(playerlink, headers=headers)
        dtree = lxml.html.fromstring(dhtml.text)
        tteam = dtree.xpath('//*[@class="zeile-transfer"]/td[10]/a/text()')
        tindex = tteam.index(club)
        tdate = dtree.xpath('//*[@class="zeile-transfer"]/td[2]/text()')[tindex]
        #pprint.pprint(tdate)
        # 球员列表
        trans_out[player] = [player, jn, position, age, club, fee, tdate, playerlink]
        print(player + ' Finished')
    #pprint.pprint(trans_out)
    print('-------------------------------------------------------------')
    #索引
    #0.in
    #1.out
    #[0,1].i.0. Full Name
    #[0,1].i.1. Soccerway Name
    # [0,1].i.2 Position
    # [0,1].i.3 Age
    # [0,1].i.4 Team to/from
    # [0,1].i.5 fee('Loan'/'End of loan'/'-')
    # [0,1].i.6 Date
    # [0,1].i.7 Link
    return [trans_in,trans_out]


def transw_to_excel(trans,PSparameter):
    # excel待定参数设定
    sheetdict = {'Borussia Dortmund': 'Dortmund', 'Bayer Leverkusen': 'Leverkusen', 'Bayern München': 'Bayern_München',
                 'Werder Bremen': 'Werder_Bremen', 'Hoffenheim': 'Hoffenheim', 'Eintracht Frankfurt': 'Frankfurt',
                 'Freiburg': 'Freiburg',
                 'Augsburg': 'Augsburg', 'Hamburger SV': 'Hamburger', 'Hannover 96': 'Hannover_96',
                 'Mainz 05': 'Mainz_05',
                 'Stuttgart': 'Stuttgart', 'Hertha BSC': 'Hertha_BSC', 'RB Leipzig': 'RB_Leipzig',
                 'Schalke 04': 'Schalke_04', 'K?ln': 'Koln', "Borussia M'gladbach": 'M?nchengladbach',
                 'Wolfsburg': 'Wolfsburg','Macará':'Macará','Wanderers':'Wanderers','Olimpia':'Olimpia','Deportivo Táchira':'Deportivo_Táchira',
                 'Universitario':'Universitario','Oriente Petrolero':'Oriente_Petrolero','Bourg-en-Bresse':'Bourg_Peronnas','Reims':'Reims','Brest':'Brest','Lens':'Lens',
                 'Clermont':'Clermont','Lorient':'Lorient','Orléans':'Orléans','Auxerre':'Auxerre','Quevilly Rouen':'QuevillyRouen','Gazélec Ajaccio':'Gazélec_Ajaccio','Sochaux':'Sochaux',
                 'Nancy':'Nancy','Tours':'Tours','Niort':'Niort','Valenciennes':'Valenciennes','Le Havre':'Le_Havre','N?mes':'Nimes','Chateauroux':'Chateauroux',
                 'Paris':'Paris','Ajaccio':'Ajaccio','Independiente del Valle':'del_Valle'}

    positiondic = {'Keeper':'GK','Defender':'D','Centre-Back':'CB','Left-Back':'LB','Right-Back':'RB','Midfield':'M','Midfielder':'M',
                   'Defensive Midfield':'DM','Central Midfield':'CM','Right Midfield':'RM','Left Midfield':'LM','Attacking Midfield':'AM',
                   'Left Wing': 'LW', 'Right Wing':'RW','Secondary Striker':'SS','Striker':'A','Centre-Forward':'CF'}

    workbookname = PSparameter[0]
    timecolumn = int(PSparameter[1])
    scorecolumn = int(PSparameter[2])
    playerrow = int(PSparameter[3])
    firstplayer = int(PSparameter[4])
    positionrow = int(PSparameter[5])
    agerow = int(PSparameter[6])
    timerow = int(PSparameter[7])
    psfont = PSparameter[8]
    psname = PSparameter[9]




    # excel、sheet
    try:
        wb = xw.Book(workbookname)
    except:
        print('No This PS')
        workbookname = input('PS Name:')
        wb = xw.Book(workbookname)
    sheetname = input('SheetName:')
    sheet = wb.sheets[sheetname]


    # 查找空列
    blank_n = firstplayer
    blank_a = 0
    while blank_a < 4:
        if sheet.range(playerrow, blank_n).value == None:
            blank_a += 1
        else:
            blank_a = 0
        blank_n += 1

    blank_c = blank_n - 3

    #球员列表
    playerlist = []
    for k in range(firstplayer, blank_c):
        playerlist.append(sheet.range(playerrow, k).value)

    #对应球员
    if psname == 'SFL':
        playerfrom = 0
    else:
        playerfrom = 1
    playerin = [trans[0][player][playerfrom] for player in trans[0]]
    playerout = [trans[1][player][playerfrom] for player in trans[1]]



    #转入球员
    print('--------------------------IN--------------------------')
    team = trans[0]

    for player in team:
        inout = 0
        print(team[player])
        #名字
        if psname == 'SFL':
            playername = team[player][0]
        else:
            playername = team[player][1]
        #列判断
        if playername in playerout:
            pcolumn = blank_c
            inout = 1
            blank_c += 1
        elif playername not in playerlist:
            pcolumn = blank_c
            blank_c += 1
        else:
            pcolumn = playerlist.index(playername) + firstplayer
        sheet.range(playerrow, pcolumn).value = playername
        sheet.range(playerrow, pcolumn).api.Font.ColorIndex = 1
        #Position
        if positionrow != 0:
            if team[player][2] in positiondic:
                sheet.range(positionrow, pcolumn).value = positiondic[team[player][2]]
            else:
                sheet.range(positionrow, pcolumn).value = team[player][2]
        #Age
        if agerow != 0:
            sheet.range(agerow, pcolumn).value = team[player][3]
        # 转会信息
        if inout == 1:
            sheet.range(playerrow, pcolumn).api.Interior.ColorIndex = 3
        elif psname == 'SFL':
            sheet.range(playerrow, pcolumn).api.Interior.Color = 15773696
        else:
            sheet.range(playerrow, pcolumn).api.Interior.Color = 10213316
        if team[player][5][:4] == 'Loan':
            try:
                sheet.range(playerrow, pcolumn).api.AddComment('Loan From ' + team[player][4] + ' Since ' + team[player][6])
                sheet.range(playerrow, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Bold = True
                sheet.range(playerrow, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Name = 'Tahoma'
            except:
                sheet.range(playerrow, pcolumn).api.Comment.Text('Loan From ' + team[player][4] + ' Since ' + team[player][6])
        elif team[player][5][:6] == 'End of':
            try:
                sheet.range(playerrow, pcolumn).api.AddComment('End of Loan From ' + team[player][4] + ' Since ' + team[player][6])
                sheet.range(playerrow, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Bold = True
                sheet.range(playerrow, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Name = 'Tahoma'
            except:
                sheet.range(playerrow, pcolumn).api.Comment.Text('End of Loan From ' + team[player][4] + ' Since ' + team[player][6])
        else:
            try:
                sheet.range(playerrow, pcolumn).api.AddComment('Transfer From ' + team[player][4] + ' Since ' + team[player][6])
                sheet.range(playerrow, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Bold = True
                sheet.range(playerrow, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Name = 'Tahoma'
            except:
                sheet.range(playerrow, pcolumn).api.Comment.Text('Transfer From ' + team[player][4] + ' Since ' + team[player][6])



        #elif team[player][4] == 'Out':
            #sheet.range(playerrow, pcolumn).api.Interior.Color = 12566463

    #转出球员
    print('--------------------------OUT--------------------------')
    team = trans[1]

    for player in team:
        inout = 0
        print(team[player])
        #名字
        if psname == 'SFL':
            playername = team[player][0]
        else:
            playername = team[player][1]
        #列判断
        if playername in playerin:
            pcolumn = blank_c
            inout = 1
            blank_c += 1
        elif playername not in playerlist:
            pcolumn = blank_c
            blank_c += 1
        else:
            pcolumn = playerlist.index(playername) + firstplayer
        sheet.range(playerrow, pcolumn).value = playername
        sheet.range(playerrow, pcolumn).api.Font.ColorIndex = 1
        #Position
        if positionrow != 0:
            if team[player][2] in positiondic:
                sheet.range(positionrow, pcolumn).value = positiondic[team[player][2]]
            else:
                sheet.range(positionrow, pcolumn).value = team[player][2]
        #Age
        if agerow != 0:
            sheet.range(agerow, pcolumn).value = team[player][3]
        # 转会信息
        if inout == 1:
            sheet.range(playerrow, pcolumn).api.Interior.ColorIndex = 3
        elif psname == 'SFL':
            sheet.range(playerrow, pcolumn).api.Interior.Color = 12566463
        else:
            sheet.range(playerrow, pcolumn).api.Interior.Color = 12566463
        if team[player][5][:4] == 'Loan':
            try:
                sheet.range(playerrow, pcolumn).api.AddComment('Loan To ' + team[player][4] + ' Since ' + team[player][6])
                sheet.range(playerrow, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Bold = True
                sheet.range(playerrow, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Name = 'Tahoma'
            except:
                sheet.range(playerrow, pcolumn).api.Comment.Text('Loan To ' + team[player][4] + ' Since ' + team[player][6])
        elif team[player][5][:6] == 'End of':
            try:
                sheet.range(playerrow, pcolumn).api.AddComment('End of Loan To ' + team[player][4] + ' Since ' + team[player][6])
                sheet.range(playerrow, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Bold = True
                sheet.range(playerrow, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Name = 'Tahoma'
            except:
                sheet.range(playerrow, pcolumn).api.Comment.Text('End of Loan To ' + team[player][4] + ' Since ' + team[player][6])
        else:
            try:
                sheet.range(playerrow, pcolumn).api.AddComment('Transfer To ' + team[player][4] + ' Since ' + team[player][6])
                sheet.range(playerrow, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Bold = True
                sheet.range(playerrow, pcolumn).api.Comment.Shape.TextFrame.Characters().Font.Name = 'Tahoma'
            except:
                sheet.range(playerrow, pcolumn).api.Comment.Text('Transfer To ' + team[player][4] + ' Since ' + team[player][6])
    return sheetname + ' Player Imported'


def ps_transwindow():
    # 网址
    print('-----Transfer Window Update-------------')
    url = input('Url of TransferList(Detailed):')
    if url == 'end':
        return 'end'
    # 写入PS
    PSparas = psparameter()
    transw_to_excel(transw_inout(url), PSparas)


def transwindow():
    while True:
        try:
            x = ps_transwindow()
            if x == 'end':
                break
            print('------------------------------------------------')
            print('Finished')
            print('------------------------------------------------')
        except Exception as inst:
            print(type(inst))
            print(inst.args)
            continue



def psupdate_4in1():
    while True:
        print('------------------------------------------')
        print('| Update PS by Soccerway Matches, Input 1 |')
        print('------------------------------------------')
        print('|        Update Dates in PS, Input 2      |')
        print('------------------------------------------')
        print('|   Update New Team Sheet in PS, Input 3  |')
        print('------------------------------------------')
        print('|   Update 2018 Winter Transfer, Input 4  |')
        print('------------------------------------------')
        ip = input('           Choose a Function:')
        print('------------------------------------------')
        if ip == '1':
            print('***Soccerway Update***')
            print('------------------------------')
            soccerway_main()
        elif ip == '2':
            print('***Gamedate Update***')
            print('------------------------------')
            gamedate()
        elif ip == '3':
            print('***Team Member Update***')
            print('------------------------------')
            transmarket()
        elif ip == '4':
            print('***Transfer Window Update***')
            print('------------------------------')
            transwindow()
        else:
            print('Wrong Input, Try Again')
            print('------------------------------')


        continue


psupdate_4in1()









***********************************************************************


###################################################################################################
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import datetime
import pprint


starttime = datetime.datetime.now()


#def whoscored_shot():



def whoscored_url(url):
    # Chrome Headless
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--disable-gpu')
    driver= webdriver.Chrome(chrome_options=chrome_options)
    # driver = webdriver.Chrome(executable_path=r"D:\chromedriver.exe",chrome_options=chrome_options)
    #driver = webdriver.Chrome()

    #打开网址
    driver.get(url)
    driver.implicitly_wait(3)
    #用时计算
    endtime = datetime.datetime.now()
    print('Urltime = ' + str((endtime - starttime).seconds) + 's')
    #射门数和控球率
    dataall = []
    for i in [3, 5]:
        datas = []
        for j in [1, 3]:
            data = driver.find_element_by_xpath('//*[@id="match-centre-stats"]/ul/li[%s]/div[1]/span[%s]' % (i, j)).text
            datas.append(data)
        title = driver.find_element_by_xpath('//*[@id="match-centre-stats"]/ul/li[%s]/h4' % i).text
        datas.insert(0, title)
        dataall.append(datas)
    #打开chalkboard
    elem = driver.find_element_by_xpath('//*[@id="live-match-options"]/li[3]/a/span[2]')
    elem.click()
    driver.implicitly_wait(3)
    #用时计算
    endtime = datetime.datetime.now()
    print('Chalkboard Time = ' + str((endtime - starttime).seconds) + 's')
    #选取元素
    #射门数据
    shotall = []
    for h in range(4):
        indexh = [6, 3, 5, 4]
        results = []
        for i in range(2, indexh[h]+2):
            shot = []
            for j in range(2):
                sot = driver.find_element_by_xpath(
                    '//*[@id="chalkboard"]/div[2]/div[1]/div[%s]/div[%s]/span[%s]' % (h + 2, i, j+1)).text
                shot.append(sot)
            label = driver.find_element_by_xpath(
                '//*[@id="chalkboard"]/div[2]/div[1]/div[%s]/div[%s]/label' % (h + 2, i)).text
            shot.insert(0, label)
            results.append(shot)
        shotall.append(results)
    # 获取Player Statistics网址
    playerstaturl = driver.find_element_by_xpath('//*[@id="sub-sub-navigation"]/ul/li[2]/a').get_attribute('href')
    driver.quit()
    return [dataall, shotall, playerstaturl]


def whoscored_player_stat(url):
    # Chrome Headless
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--disable-gpu')
    driver = webdriver.Chrome(chrome_options=chrome_options)
    # driver = webdriver.Chrome(executable_path=r"D:\chromedriver.exe",chrome_options=chrome_options)
    # driver = webdriver.Chrome()

    # 打开网址
    driver.get(url)
    driver.implicitly_wait(3)
    endtime = datetime.datetime.now()
    print('Urltime = ' + str((endtime - starttime).seconds) + 's')
    alldata = []
    # 射门信息
    allshotdata = []
    try:
        for i in range(1, 7):
            shotdata = []
            shota = driver.find_element_by_xpath(
                '//*[@id="match-report-team-statistics"]/div[1]/div[%s]/span[1]/span' % i).text
            shotb = driver.find_element_by_xpath(
                '//*[@id="match-report-team-statistics"]/div[1]/div[%s]/span[2]' % i).text
            shotc = driver.find_element_by_xpath(
                '//*[@id="match-report-team-statistics"]/div[1]/div[%s]/span[3]/span' % i).text
            shotdata.append(shotb)
            shotdata.append(shota)
            shotdata.append(shotc)
            allshotdata.append(shotdata)
            print('Shot Data Downloaded')
    except:
        print('Shot Data Error')
    alldata.append(allshotdata)
    # 控球率
    Possessiondata = []
    try:
        shotdata = []
        possa = driver.find_element_by_xpath(
            '//*[@id="match-report-team-statistics"]/div[2]/div[2]/span/span[2]/span').text
        possb = driver.find_element_by_xpath(
            '//*[@id="match-report-team-statistics"]/div[2]/div[2]/span/span[3]/span').text
        Possessiondata.append(possa)
        Possessiondata.append(possb)
    except:
        print('Possession Error')
    alldata.append(Possessiondata)
    # 球员信息
    xpathlist = ['*[@id="statistics-table-away-summary"]/table/tbody',
                 '*[@id="statistics-table-home-summary"]/table/tbody']
    for xp in xpathlist:
        homeaway = ['Home', 'Away']
        i = 1
        while i < 30:
            playeralldata = []
            try:
                playerdata = []
                # 名字
                player = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="pn"]/a' % (xp, i)).text
                # 换上换下
                try:
                    inouttime = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="pn"]/a/span' % (xp, i)).text
                    if len(inouttime) > 0:
                        inouttype = driver.find_element_by_xpath(
                            '//%s/tr[%s]/td[@class="pn"]/a/span/span' % (xp, i)).get_attribute(
                            'data-type')
                    else:
                        inouttype = 0
                        inouttime = 0
                    if inouttime != '':
                        player = player.replace(inouttime, '')
                    playerdata.append(player)
                    playerdata.append(inouttype)
                    playerdata.append(inouttime)
                except:
                    playerdata.append(player)
                    playerdata.append(0)
                    playerdata.append(0)
                playeralldata.append(playerdata)
                playerdata = []
                # 年龄和位置
                try:
                    # 年龄
                    age = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="pn"]/span[1]' % (xp, i)).text
                    playerdata.append(age)
                    # 位置
                    pos = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="pn"]/span[2]' % (xp, i)).text
                    playerdata.append(pos)
                except:
                    print(player + ' Age or Position Error')
                playeralldata.append(playerdata)
                playerdata = []
                # 关键数据
                try:
                    # Rating
                    rating = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="rating "]' % (xp, i)).text
                    playerdata.append(rating)
                    # Key Events
                    j = 1
                    allevent = []
                    while j < 10:
                        events = []
                        try:
                            event = driver.find_element_by_xpath(
                                '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                    xp, i, j)).get_attribute('data-type')
                            eventminute = driver.find_element_by_xpath(
                                '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                    xp, i, j)).get_attribute('data-minute')
                            eventsecond = driver.find_element_by_xpath(
                                '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                    xp, i, j)).get_attribute('data-second')
                            events.append(event)
                            events.append(eventminute)
                            events.append(eventsecond)
                            allevent.append(events)
                            j += 1
                        except:
                            break
                    playerdata.append(allevent)
                except:
                    print(player + ' Key Data Error')
                playeralldata.append(playerdata)
                playerdata = []
                # 其他数据
                try:
                    # 射门数
                    shottotal = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="ShotsTotal "]' % (xp, i)).text
                    playerdata.append(shottotal)
                    # 射正数
                    shotontarget = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="ShotOnTarget "]' % (xp, i)).text
                    playerdata.append(shotontarget)
                    # 关键传球数
                    keypass = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="KeyPassTotal "]' % (xp, i)).text
                    playerdata.append(keypass)
                    # 传球成功率
                    passsuccess = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="PassSuccessInMatch "]' % (xp, i)).text
                    playerdata.append(passsuccess)
                    # 空中争抢
                    DuelAerialWon = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="DuelAerialWon "]' % (xp, i)).text
                    playerdata.append(DuelAerialWon)
                    # 触球数
                    Touches = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="Touches "]' % (xp, i)).text
                    playerdata.append(Touches)
                except:
                    print(player + ' Other Data Error')
                i += 1
                playeralldata.append(playerdata)
                playerdata = []
                alldata.append(playeralldata)
            except:
                print(homeaway[xpathlist.index(xp)] + ' Team Total ' + str(i - 1) + ' Player Downloaded')
                break
    driver.quit()
    return alldata


#whoscored_url('https://www.whoscored.com/Matches/1222117/Live/Spain-La-Liga-2017-2018-Eibar-Malaga')
whoscored1 = whoscored_url('https://www.whoscored.com/Matches/1201922/Live/Germany-Bundesliga-2017-2018-Borussia-Dortmund-Schalke-04')
pprint.pprint(whoscored1)
endtime = datetime.datetime.now()
print('Whoscored 1 Run Time ' + str((endtime - starttime).seconds) + 's')
whoscored2 = whoscored_player_stat(whoscored1[2])
pprint.pprint(whoscored2)
endtime = datetime.datetime.now()
print('Whoscored 2 Run Time ' + str((endtime - starttime).seconds) + 's')



***********************************************************************
E:\PycharmProjects\Selenium\venv\Scripts\python.exe E:/PycharmProjects/Selenium/Whoscored-Selenium.py
Urltime = 40s
Chalkboard Time = 42s
[[['Total Shots', '11', '12'], ['Possession%', '47', '53']],
 [[['Goals', '3', '4'],
   ['Shots on Target', '6', '7'],
   ['Shots off Target', '3', '5'],
   ['Woodworks', '0', '0'],
   ['Blocked', '2', '0'],
   ['Own', '0', '1']],
  [['6-yard box', '3', '0'],
   ['Penalty Area', '8', '10'],
   ['Outside of box', '0', '2']],
  [['Open Play', '8', '8'],
   ['Fastbreak', '2', '2'],
   ['Set Pieces', '1', '2'],
   ['Penalty', '0', '0'],
   ['Own Goal', '0', '1']],
  [['Right foot', '5', '3'],
   ['Left foot', '2', '5'],
   ['Head', '3', '4'],
   ['Other body parts', '1', '0']]],
 'https://www.whoscored.com/Matches/1201922/LiveStatistics/Germany-Bundesliga-2017-2018-Borussia-Dortmund-Schalke-04']
Whoscored 1 Run Time 50s
Urltime = 72s
Home Team Total 18 Player Downloaded
Away Team Total 18 Player Downloaded
[[['Shots', '11', '12'],
  ['Shots on target', '6', '7'],
  ['Pass Success %', '73%', '79%'],
  ['Aerial Duel Success', '32%', '68%'],
  ['Dribbles won', '5', '13'],
  ['Tackles', '24', '21']],
 ['47%', '53%'],
 [['Ralf F?hrmann', 0, 0],
  ['29', ', GK'],
  ['5.73', [['17', '98', '44']]],
  ['0', '0', '0', '58.3', '0', '22']],
 [['Naldo', 0, 0],
  ['35', ', DC'],
  ['7.56', [['16', '93', '33']]],
  ['1', '1', '0', '83', '8', '65']],
 [['Benjamin Stambouli', 0, 0],
  ['27', ', DC'],
  ['7.33', [['1', '85', '5'], ['1', '60', '32'], ['16', '17', '49']]],
  ['0', '0', '3', '79.4', '2', '76']],
 [['Thilo Kehrer ', '18', '(45′)'],
  ['21', ', DC'],
  ['5.32', [['17', '21', '55']]],
  ['0', '0', '0', '66.7', '1', '28']],
 [['Daniel Caligiuri', 0, 0],
  ['30', ', DMR'],
  ['9.08', [['16', '85', '9'], ['17', '46', '40']]],
  ['4', '3', '1', '75', '1', '79']],
 [['Bastian Oczipka', 0, 0],
  ['29', ', DML'],
  ['7.37', []],
  ['0', '0', '1', '74.2', '1', '68']],
 [['Max Meyer', 0, 0],
  ['22', ', MC'],
  ['6.50', []],
  ['0', '0', '0', '92.1', '0', '73']],
 [['Weston McKennie ', '18', '(32′)'],
  ['19', ', MC'],
  ['5.54', [['17', '2', '17']]],
  ['0', '0', '0', '60', '2', '8']],
 [['Franco Di Santo ', '18', '(32′)'],
  ['28', ', FWR'],
  ['5.66', []],
  ['0', '0', '0', '100', '1', '7']],
 [['Guido Burgstaller', 0, 0],
  ['28', ', FW'],
  ['7.40', [['16', '60', '35']]],
  ['3', '2', '0', '71.4', '0', '39']],
 [['Yevhen Konoplyanka', 0, 0],
  ['28', ', FWL'],
  ['7.88', [['1', '93', '31'], ['17', '89', '29'], ['1', '64', '10']]],
  ['1', '0', '3', '73.3', '0', '32']],
 [['Leon Goretzka ', '19', '(32′)'],
  ['23', ', Sub'],
  ['6.79', []],
  ['2', '0', '1', '78.6', '1', '37']],
 [['Amine Harit ', '19', '(32′)'],
  ['20', ', Sub'],
  ['8.10', [['16', '64', '12']]],
  ['1', '1', '1', '84.2', '2', '42']],
 [['Matija Nastasic ', '19', '(45′)'],
  ['24', ', Sub'],
  ['7.36', []],
  ['0', '0', '0', '78.1', '4', '50']],
 [['Alessandro Sch?pf', 0, 0],
  ['24', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Alexander Nübel', 0, 0],
  ['21', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Coke', 0, 0], ['30', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']],
 [['Breel Embolo', 0, 0],
  ['21', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Roman Weidenfeller', 0, 0],
  ['37', ', GK'],
  ['5.30', [['51', '60', '34']]],
  ['0', '0', '0', '46.3', '0', '46']],
 [['Marcel Schmelzer', 0, 0],
  ['30', ', DC'],
  ['6.68', []],
  ['0', '0', '0', '82.2', '0', '64']],
 [['Sokratis', 0, 0],
  ['29', ', DC'],
  ['6.94', [['17', '52', '23']]],
  ['0', '0', '0', '84', '3', '67']],
 [['?mer Toprak', 0, 0],
  ['28', ', DC'],
  ['6.36', []],
  ['1', '0', '0', '71.4', '1', '50']],
 [['Christian Pulisic', 0, 0],
  ['19', ', DMR'],
  ['5.76', []],
  ['0', '0', '1', '76', '0', '42']],
 [['Raphael Guerreiro ', '18', '(82′)'],
  ['24', ', DML'],
  ['8.08', [['16', '24', '11']]],
  ['1', '1', '1', '91.9', '0', '70']],
 [['Julian Weigl', 0, 0],
  ['22', ', MC'],
  ['6.72', []],
  ['0', '0', '0', '64', '1', '36']],
 [['Nuri Sahin', 0, 0],
  ['29', ', MC'],
  ['6.82', [['17', '98', '45']]],
  ['1', '0', '2', '77.6', '3', '71']],
 [['Mario G?tze ', '18', '(77′)'],
  ['25', ', AMC'],
  ['7.47', [['16', '19', '48']]],
  ['1', '1', '1', '72.4', '1', '49']],
 [['Andriy Yarmolenko ', '18', '(67′)'],
  ['28', ', AMC'],
  ['6.81', []],
  ['0', '0', '2', '73.3', '1', '26']],
 [['Pierre-Emerick Aubameyang', 0, 0],
  ['28', ', FW'],
  ['7.07',
   [['17', '71', '27'],
    ['17', '54', '24'],
    ['1', '19', '46'],
    ['16', '11', '11']]],
  ['7', '4', '1', '82.4', '1', '35']],
 [['Dan-Axel Zagadou ', '19', '(82′)'],
  ['18', ', Sub'],
  ['5.78', []],
  ['0', '0', '0', '0', '0', '1']],
 [['Gonzalo Castro ', '19', '(77′)'],
  ['30', ', Sub'],
  ['5.70', [['17', '78', '11']]],
  ['0', '0', '0', '0', '0', '2']],
 [['Marc Bartra ', '19', '(67′)'],
  ['27', ', Sub'],
  ['5.99', []],
  ['0', '0', '0', '0', '0', '10']],
 [['André Schürrle', 0, 0],
  ['27', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Maximilian Philipp', 0, 0],
  ['24', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Shinji Kagawa', 0, 0],
  ['28', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Dominik Reimann', 0, 0],
  ['20', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']]]
Whoscored 2 Run Time 246s

Process finished with exit code 0


###################################################################################################
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import datetime
import pprint


starttime = datetime.datetime.now()


#def whoscored_shot():



def whoscored_url(url):
    # Chrome Headless
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--disable-gpu')
    #driver = webdriver.Chrome(chrome_options=chrome_options)
    # driver = webdriver.Chrome(executable_path=r"D:\chromedriver.exe",chrome_options=chrome_options)
    driver = webdriver.Chrome()

    #打开网址
    driver.get(url)
    driver.implicitly_wait(3)
    #用时计算
    endtime = datetime.datetime.now()
    print('Urltime = ' + str((endtime - starttime).seconds) + 's')
    #射门数和控球率
    dataall = []
    for i in [3, 5]:
        datas = []
        for j in [1, 3]:
            data = driver.find_element_by_xpath('//*[@id="match-centre-stats"]/ul/li[%s]/div[1]/span[%s]' % (i, j)).text
            datas.append(data)
        title = driver.find_element_by_xpath('//*[@id="match-centre-stats"]/ul/li[%s]/h4' % i).text
        datas.insert(0, title)
        dataall.append(datas)
    #打开chalkboard
    elem = driver.find_element_by_xpath('//*[@id="live-match-options"]/li[3]/a/span[2]')
    elem.click()
    driver.implicitly_wait(3)
    #用时计算
    endtime = datetime.datetime.now()
    print('Chalkboard Time = ' + str((endtime - starttime).seconds) + 's')
    #选取元素
    #射门数据
    shotall = []
    for h in range(4):
        indexh = [6, 3, 5, 4]
        results = []
        for i in range(2, indexh[h]+2):
            shot = []
            for j in range(2):
                sot = driver.find_element_by_xpath(
                    '//*[@id="chalkboard"]/div[2]/div[1]/div[%s]/div[%s]/span[%s]' % (h + 2, i, j+1)).text
                shot.append(sot)
            label = driver.find_element_by_xpath(
                '//*[@id="chalkboard"]/div[2]/div[1]/div[%s]/div[%s]/label' % (h + 2, i)).text
            shot.insert(0, label)
            results.append(shot)
        shotall.append(results)
    # 获取Player Statistics网址
    playerstaturl = driver.find_element_by_xpath('//*[@id="sub-sub-navigation"]/ul/li[2]/a').get_attribute('href')
    driver.quit()
    return [dataall, shotall, playerstaturl]


def whoscored_player_stat(url):
    # Chrome Headless
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--disable-gpu')
    driver = webdriver.Chrome(chrome_options=chrome_options)
    # driver = webdriver.Chrome(executable_path=r"D:\chromedriver.exe",chrome_options=chrome_options)
    # driver = webdriver.Chrome()

    # 打开网址
    driver.get(url)
    driver.implicitly_wait(3)
    endtime = datetime.datetime.now()
    print('Urltime = ' + str((endtime - starttime).seconds) + 's')
    alldata = []
    # 射门信息
    allshotdata = []
    try:
        for i in range(1, 7):
            shotdata = []
            shota = driver.find_element_by_xpath(
                '//*[@id="match-report-team-statistics"]/div[1]/div[%s]/span[1]/span' % i).text
            shotb = driver.find_element_by_xpath(
                '//*[@id="match-report-team-statistics"]/div[1]/div[%s]/span[2]' % i).text
            shotc = driver.find_element_by_xpath(
                '//*[@id="match-report-team-statistics"]/div[1]/div[%s]/span[3]/span' % i).text
            shotdata.append(shotb)
            shotdata.append(shota)
            shotdata.append(shotc)
            allshotdata.append(shotdata)
        print('Shot Data Downloaded')
    except:
        print('Shot Data Error')
    alldata.append(allshotdata)
    # 控球率
    Possessiondata = []
    try:
        shotdata = []
        possa = driver.find_element_by_xpath(
            '//*[@id="match-report-team-statistics"]/div[2]/div[2]/span/span[2]/span').text
        possb = driver.find_element_by_xpath(
            '//*[@id="match-report-team-statistics"]/div[2]/div[2]/span/span[3]/span').text
        Possessiondata.append(possa)
        Possessiondata.append(possb)
    except:
        print('Possession Error')
    alldata.append(Possessiondata)
    # 球员信息
    xpathlist = ['*[@id="statistics-table-home-summary"]/table/tbody',
                 '*[@id="statistics-table-away-summary"]/table/tbody']
    for xp in xpathlist:
        homeaway = ['Home', 'Away']
        i = 1
        while i < 30:
            playeralldata = []
            try:
                playerdata = []
                # 名字
                player = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="pn"]/a' % (xp, i)).text
                # 换上换下
                try:
                    inouttime = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="pn"]/a/span' % (xp, i)).text
                    if len(inouttime) > 0:
                        inouttype = driver.find_element_by_xpath(
                            '//%s/tr[%s]/td[@class="pn"]/a/span/span' % (xp, i)).get_attribute(
                            'data-type')
                    else:
                        inouttype = 0
                        inouttime = 0
                    if inouttime != '':
                        player = player.replace(inouttime, '')
                    playerdata.append(player)
                    playerdata.append(inouttype)
                    playerdata.append(inouttime)
                except:
                    playerdata.append(player)
                    playerdata.append(0)
                    playerdata.append(0)
                playeralldata.append(playerdata)
                playerdata = []
                # 年龄和位置
                try:
                    # 年龄
                    age = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="pn"]/span[1]' % (xp, i)).text
                    playerdata.append(age)
                    # 位置
                    pos = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="pn"]/span[2]' % (xp, i)).text
                    playerdata.append(pos)
                except:
                    print(player + ' Age or Position Error')
                playeralldata.append(playerdata)
                playerdata = []
                # 关键数据
                try:
                    # Rating
                    rating = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="rating "]' % (xp, i)).text
                    playerdata.append(rating)
                    # Key Events
                    j = 1
                    allevent = []
                    while j < 10:
                        events = []
                        try:
                            event = driver.find_element_by_xpath(
                                '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                    xp, i, j)).get_attribute('data-type')
                            eventminute = driver.find_element_by_xpath(
                                '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                    xp, i, j)).get_attribute('data-minute')
                            eventsecond = driver.find_element_by_xpath(
                                '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                    xp, i, j)).get_attribute('data-second')
                            events.append(event)
                            events.append(eventminute)
                            events.append(eventsecond)
                            allevent.append(events)
                            j += 1
                        except:
                            break
                    playerdata.append(allevent)
                except:
                    print(player + ' Key Data Error')
                playeralldata.append(playerdata)
                playerdata = []
                # 其他数据
                try:
                    # 射门数
                    shottotal = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="ShotsTotal "]' % (xp, i)).text
                    playerdata.append(shottotal)
                    # 射正数
                    shotontarget = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="ShotOnTarget "]' % (xp, i)).text
                    playerdata.append(shotontarget)
                    # 关键传球数
                    keypass = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="KeyPassTotal "]' % (xp, i)).text
                    playerdata.append(keypass)
                    # 传球成功率
                    passsuccess = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="PassSuccessInMatch "]' % (xp, i)).text
                    playerdata.append(passsuccess)
                    # 空中争抢
                    DuelAerialWon = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="DuelAerialWon "]' % (xp, i)).text
                    playerdata.append(DuelAerialWon)
                    # 触球数
                    Touches = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="Touches "]' % (xp, i)).text
                    playerdata.append(Touches)
                except:
                    print(player + ' Other Data Error')
                i += 1
                playeralldata.append(playerdata)
                playerdata = []
                alldata.append(playeralldata)
            except:
                print(homeaway[xpathlist.index(xp)] + ' Team Total ' + str(i - 1) + ' Player Downloaded')
                break
    driver.quit()
    return alldata


#whoscored_url('https://www.whoscored.com/Matches/1222117/Live/Spain-La-Liga-2017-2018-Eibar-Malaga')
whoscored1 = whoscored_url('https://www.whoscored.com/Matches/1201922/Live/Germany-Bundesliga-2017-2018-Borussia-Dortmund-Schalke-04')
pprint.pprint(whoscored1)
endtime = datetime.datetime.now()
print('Whoscored 1 Run Time ' + str((endtime - starttime).seconds) + 's')
whoscored2 = whoscored_player_stat(whoscored1[2])
pprint.pprint(whoscored2)
endtime = datetime.datetime.now()
print('Whoscored 2 Run Time ' + str((endtime - starttime).seconds) + 's')



***********************************************************************
E:\PycharmProjects\Selenium\venv\Scripts\python.exe E:/PycharmProjects/Selenium/Whoscored-Selenium.py
Urltime = 35s
Chalkboard Time = 35s
[[['Total Shots', '11', '12'], ['Possession%', '47', '53']],
 [[['Goals', '3', '4'],
   ['Shots on Target', '6', '7'],
   ['Shots off Target', '3', '5'],
   ['Woodworks', '0', '0'],
   ['Blocked', '2', '0'],
   ['Own', '0', '1']],
  [['6-yard box', '3', '0'],
   ['Penalty Area', '8', '10'],
   ['Outside of box', '0', '2']],
  [['Open Play', '8', '8'],
   ['Fastbreak', '2', '2'],
   ['Set Pieces', '1', '2'],
   ['Penalty', '0', '0'],
   ['Own Goal', '0', '1']],
  [['Right foot', '5', '3'],
   ['Left foot', '2', '5'],
   ['Head', '3', '4'],
   ['Other body parts', '1', '0']]],
 'https://www.whoscored.com/Matches/1201922/LiveStatistics/Germany-Bundesliga-2017-2018-Borussia-Dortmund-Schalke-04']
Whoscored 1 Run Time 40s
Urltime = 76s
Shot Data Downloaded
Shot Data Downloaded
Shot Data Downloaded
Shot Data Downloaded
Shot Data Downloaded
Shot Data Downloaded
Home Team Total 18 Player Downloaded
Away Team Total 18 Player Downloaded
[[['Shots', '11', '12'],
  ['Shots on target', '6', '7'],
  ['Pass Success %', '73%', '79%'],
  ['Aerial Duel Success', '32%', '68%'],
  ['Dribbles won', '5', '13'],
  ['Tackles', '24', '21']],
 ['47%', '53%'],
 [['Roman Weidenfeller', 0, 0],
  ['37', ', GK'],
  ['5.30', [['51', '60', '34']]],
  ['0', '0', '0', '46.3', '0', '46']],
 [['Marcel Schmelzer', 0, 0],
  ['30', ', DC'],
  ['6.68', []],
  ['0', '0', '0', '82.2', '0', '64']],
 [['Sokratis', 0, 0],
  ['29', ', DC'],
  ['6.94', [['17', '52', '23']]],
  ['0', '0', '0', '84', '3', '67']],
 [['?mer Toprak', 0, 0],
  ['28', ', DC'],
  ['6.36', []],
  ['1', '0', '0', '71.4', '1', '50']],
 [['Christian Pulisic', 0, 0],
  ['19', ', DMR'],
  ['5.76', []],
  ['0', '0', '1', '76', '0', '42']],
 [['Raphael Guerreiro ', '18', '(82′)'],
  ['24', ', DML'],
  ['8.08', [['16', '24', '11']]],
  ['1', '1', '1', '91.9', '0', '70']],
 [['Julian Weigl', 0, 0],
  ['22', ', MC'],
  ['6.72', []],
  ['0', '0', '0', '64', '1', '36']],
 [['Nuri Sahin', 0, 0],
  ['29', ', MC'],
  ['6.82', [['17', '98', '45']]],
  ['1', '0', '2', '77.6', '3', '71']],
 [['Mario G?tze ', '18', '(77′)'],
  ['25', ', AMC'],
  ['7.47', [['16', '19', '48']]],
  ['1', '1', '1', '72.4', '1', '49']],
 [['Andriy Yarmolenko ', '18', '(67′)'],
  ['28', ', AMC'],
  ['6.81', []],
  ['0', '0', '2', '73.3', '1', '26']],
 [['Pierre-Emerick Aubameyang', 0, 0],
  ['28', ', FW'],
  ['7.07',
   [['17', '71', '27'],
    ['17', '54', '24'],
    ['1', '19', '46'],
    ['16', '11', '11']]],
  ['7', '4', '1', '82.4', '1', '35']],
 [['Dan-Axel Zagadou ', '19', '(82′)'],
  ['18', ', Sub'],
  ['5.78', []],
  ['0', '0', '0', '0', '0', '1']],
 [['Gonzalo Castro ', '19', '(77′)'],
  ['30', ', Sub'],
  ['5.70', [['17', '78', '11']]],
  ['0', '0', '0', '0', '0', '2']],
 [['Marc Bartra ', '19', '(67′)'],
  ['27', ', Sub'],
  ['5.99', []],
  ['0', '0', '0', '0', '0', '10']],
 [['André Schürrle', 0, 0],
  ['27', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Maximilian Philipp', 0, 0],
  ['24', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Shinji Kagawa', 0, 0],
  ['28', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Dominik Reimann', 0, 0],
  ['20', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Ralf F?hrmann', 0, 0],
  ['29', ', GK'],
  ['5.73', [['17', '98', '44']]],
  ['0', '0', '0', '58.3', '0', '22']],
 [['Naldo', 0, 0],
  ['35', ', DC'],
  ['7.56', [['16', '93', '33']]],
  ['1', '1', '0', '83', '8', '65']],
 [['Benjamin Stambouli', 0, 0],
  ['27', ', DC'],
  ['7.33', [['1', '85', '5'], ['1', '60', '32'], ['16', '17', '49']]],
  ['0', '0', '3', '79.4', '2', '76']],
 [['Thilo Kehrer ', '18', '(45′)'],
  ['21', ', DC'],
  ['5.32', [['17', '21', '55']]],
  ['0', '0', '0', '66.7', '1', '28']],
 [['Daniel Caligiuri', 0, 0],
  ['30', ', DMR'],
  ['9.08', [['16', '85', '9'], ['17', '46', '40']]],
  ['4', '3', '1', '75', '1', '79']],
 [['Bastian Oczipka', 0, 0],
  ['29', ', DML'],
  ['7.37', []],
  ['0', '0', '1', '74.2', '1', '68']],
 [['Max Meyer', 0, 0],
  ['22', ', MC'],
  ['6.50', []],
  ['0', '0', '0', '92.1', '0', '73']],
 [['Weston McKennie ', '18', '(32′)'],
  ['19', ', MC'],
  ['5.54', [['17', '2', '17']]],
  ['0', '0', '0', '60', '2', '8']],
 [['Franco Di Santo ', '18', '(32′)'],
  ['28', ', FWR'],
  ['5.66', []],
  ['0', '0', '0', '100', '1', '7']],
 [['Guido Burgstaller', 0, 0],
  ['28', ', FW'],
  ['7.40', [['16', '60', '35']]],
  ['3', '2', '0', '71.4', '0', '39']],
 [['Yevhen Konoplyanka', 0, 0],
  ['28', ', FWL'],
  ['7.88', [['1', '93', '31'], ['17', '89', '29'], ['1', '64', '10']]],
  ['1', '0', '3', '73.3', '0', '32']],
 [['Leon Goretzka ', '19', '(32′)'],
  ['23', ', Sub'],
  ['6.79', []],
  ['2', '0', '1', '78.6', '1', '37']],
 [['Amine Harit ', '19', '(32′)'],
  ['20', ', Sub'],
  ['8.10', [['16', '64', '12']]],
  ['1', '1', '1', '84.2', '2', '42']],
 [['Matija Nastasic ', '19', '(45′)'],
  ['24', ', Sub'],
  ['7.36', []],
  ['0', '0', '0', '78.1', '4', '50']],
 [['Alessandro Sch?pf', 0, 0],
  ['24', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Alexander Nübel', 0, 0],
  ['21', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Coke', 0, 0], ['30', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']],
 [['Breel Embolo', 0, 0],
  ['21', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']]]
Whoscored 2 Run Time 206s

Process finished with exit code 0


###################################################################################################
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import datetime
import pprint


starttime = datetime.datetime.now()


#def whoscored_shot():



def whoscored_url(url):
    # Chrome Headless
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--disable-gpu')
    #driver = webdriver.Chrome(chrome_options=chrome_options)
    # driver = webdriver.Chrome(executable_path=r"D:\chromedriver.exe",chrome_options=chrome_options)
    driver = webdriver.Chrome()

    #打开网址
    driver.get(url)
    driver.implicitly_wait(3)
    #用时计算
    endtime = datetime.datetime.now()
    print('Urltime = ' + str((endtime - starttime).seconds) + 's')
    #射门数和控球率
    dataall = []
    for i in [3, 5]:
        datas = []
        for j in [1, 3]:
            data = driver.find_element_by_xpath('//*[@id="match-centre-stats"]/ul/li[%s]/div[1]/span[%s]' % (i, j)).text
            datas.append(data)
        title = driver.find_element_by_xpath('//*[@id="match-centre-stats"]/ul/li[%s]/h4' % i).text
        datas.insert(0, title)
        dataall.append(datas)
    #打开chalkboard
    elem = driver.find_element_by_xpath('//*[@id="live-match-options"]/li[3]/a/span[2]')
    elem.click()
    driver.implicitly_wait(3)
    #用时计算
    endtime = datetime.datetime.now()
    print('Chalkboard Time = ' + str((endtime - starttime).seconds) + 's')
    #选取元素
    #射门数据
    shotall = []
    for h in range(4):
        indexh = [6, 3, 5, 4]
        results = []
        for i in range(2, indexh[h]+2):
            shot = []
            for j in range(2):
                sot = driver.find_element_by_xpath(
                    '//*[@id="chalkboard"]/div[2]/div[1]/div[%s]/div[%s]/span[%s]' % (h + 2, i, j+1)).text
                shot.append(sot)
            label = driver.find_element_by_xpath(
                '//*[@id="chalkboard"]/div[2]/div[1]/div[%s]/div[%s]/label' % (h + 2, i)).text
            shot.insert(0, label)
            results.append(shot)
        shotall.append(results)
    # 获取Player Statistics网址
    playerstaturl = driver.find_element_by_xpath('//*[@id="sub-sub-navigation"]/ul/li[2]/a').get_attribute('href')
    driver.quit()
    return [dataall, shotall, playerstaturl]


def whoscored_player_stat(url):
    # Chrome Headless
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--disable-gpu')
    driver = webdriver.Chrome(chrome_options=chrome_options)
    # driver = webdriver.Chrome(executable_path=r"D:\chromedriver.exe",chrome_options=chrome_options)
    # driver = webdriver.Chrome()

    # 打开网址
    driver.get(url)
    driver.implicitly_wait(3)
    endtime = datetime.datetime.now()
    print('Urltime = ' + str((endtime - starttime).seconds) + 's')
    alldata = []
    # 射门信息
    allshotdata = []
    try:
        for i in range(1, 7):
            shotdata = []
            shota = driver.find_element_by_xpath(
                '//*[@id="match-report-team-statistics"]/div[1]/div[%s]/span[1]/span' % i).text
            shotb = driver.find_element_by_xpath(
                '//*[@id="match-report-team-statistics"]/div[1]/div[%s]/span[2]' % i).text
            shotc = driver.find_element_by_xpath(
                '//*[@id="match-report-team-statistics"]/div[1]/div[%s]/span[3]/span' % i).text
            shotdata.append(shotb)
            shotdata.append(shota)
            shotdata.append(shotc)
            allshotdata.append(shotdata)
        print('Shot Data Downloaded')
    except:
        print('Shot Data Error')
    alldata.append(allshotdata)
    # 控球率
    Possessiondata = []
    try:
        shotdata = []
        possa = driver.find_element_by_xpath(
            '//*[@id="match-report-team-statistics"]/div[2]/div[2]/span/span[2]/span').text
        possb = driver.find_element_by_xpath(
            '//*[@id="match-report-team-statistics"]/div[2]/div[2]/span/span[3]/span').text
        Possessiondata.append(possa)
        Possessiondata.append(possb)
    except:
        print('Possession Error')
    alldata.append(Possessiondata)
    # 球员信息
    xpathlist = ['*[@id="statistics-table-home-summary"]/table/tbody',
                 '*[@id="statistics-table-away-summary"]/table/tbody']
    for xp in xpathlist:
        homeaway = ['Home', 'Away']
        i = 1
        while i < 30:
            playeralldata = []
            try:
                playerdata = []
                # 名字
                player = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="pn"]/a' % (xp, i)).text
                # 换上换下
                try:
                    inouttime = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="pn"]/a/span' % (xp, i)).text
                    if len(inouttime) > 0:
                        inouttype = driver.find_element_by_xpath(
                            '//%s/tr[%s]/td[@class="pn"]/a/span/span' % (xp, i)).get_attribute(
                            'data-type')
                    else:
                        inouttype = 0
                        inouttime = 0
                    if inouttime != '':
                        player = player.replace(inouttime, '')
                    playerdata.append(player)
                    playerdata.append(inouttype)
                    playerdata.append(inouttime)
                except:
                    playerdata.append(player)
                    playerdata.append(0)
                    playerdata.append(0)
                playeralldata.append(playerdata)
                playerdata = []
                # 年龄和位置
                try:
                    # 年龄
                    age = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="pn"]/span[1]' % (xp, i)).text
                    playerdata.append(age)
                    # 位置
                    pos = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="pn"]/span[2]' % (xp, i)).text
                    playerdata.append(pos)
                except:
                    print(player + ' Age or Position Error')
                playeralldata.append(playerdata)
                playerdata = []
                # 关键数据
                try:
                    # Rating
                    rating = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="rating "]' % (xp, i)).text
                    playerdata.append(rating)
                    # Key Events
                    j = 1
                    allevent = []
                    while j < 10:
                        events = []
                        try:
                            event = driver.find_element_by_xpath(
                                '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                    xp, i, j)).get_attribute('data-type')
                            eventminute = driver.find_element_by_xpath(
                                '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                    xp, i, j)).get_attribute('data-minute')
                            eventsecond = driver.find_element_by_xpath(
                                '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                    xp, i, j)).get_attribute('data-second')
                            events.append(event)
                            events.append(eventminute)
                            events.append(eventsecond)
                            allevent.append(events)
                            j += 1
                        except:
                            break
                    playerdata.append(allevent)
                except:
                    print(player + ' Key Data Error')
                playeralldata.append(playerdata)
                playerdata = []
                # 其他数据
                try:
                    # 射门数
                    shottotal = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="ShotsTotal "]' % (xp, i)).text
                    playerdata.append(shottotal)
                    # 射正数
                    shotontarget = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="ShotOnTarget "]' % (xp, i)).text
                    playerdata.append(shotontarget)
                    # 关键传球数
                    keypass = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="KeyPassTotal "]' % (xp, i)).text
                    playerdata.append(keypass)
                    # 传球成功率
                    passsuccess = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="PassSuccessInMatch "]' % (xp, i)).text
                    playerdata.append(passsuccess)
                    # 空中争抢
                    DuelAerialWon = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="DuelAerialWon "]' % (xp, i)).text
                    playerdata.append(DuelAerialWon)
                    # 触球数
                    Touches = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="Touches "]' % (xp, i)).text
                    playerdata.append(Touches)
                except:
                    print(player + ' Other Data Error')
                i += 1
                playeralldata.append(playerdata)
                playerdata = []
                alldata.append(playeralldata)
            except:
                print(homeaway[xpathlist.index(xp)] + ' Team Total ' + str(i - 1) + ' Player Downloaded')
                break
    driver.quit()
    return alldata


#whoscored_url('https://www.whoscored.com/Matches/1222117/Live/Spain-La-Liga-2017-2018-Eibar-Malaga')
whoscored1 = whoscored_url('https://www.whoscored.com/Matches/1201922/Live/Germany-Bundesliga-2017-2018-Borussia-Dortmund-Schalke-04')
pprint.pprint(whoscored1)
endtime = datetime.datetime.now()
print('Whoscored 1 Run Time ' + str((endtime - starttime).seconds) + 's')
whoscored2 = whoscored_player_stat(whoscored1[2])
pprint.pprint(whoscored2)
endtime = datetime.datetime.now()
print('Whoscored 2 Run Time ' + str((endtime - starttime).seconds) + 's')



***********************************************************************
E:\PycharmProjects\Selenium\venv\Scripts\python.exe E:/PycharmProjects/Selenium/Whoscored-Selenium.py
Urltime = 35s
Chalkboard Time = 35s
[[['Total Shots', '11', '12'], ['Possession%', '47', '53']],
 [[['Goals', '3', '4'],
   ['Shots on Target', '6', '7'],
   ['Shots off Target', '3', '5'],
   ['Woodworks', '0', '0'],
   ['Blocked', '2', '0'],
   ['Own', '0', '1']],
  [['6-yard box', '3', '0'],
   ['Penalty Area', '8', '10'],
   ['Outside of box', '0', '2']],
  [['Open Play', '8', '8'],
   ['Fastbreak', '2', '2'],
   ['Set Pieces', '1', '2'],
   ['Penalty', '0', '0'],
   ['Own Goal', '0', '1']],
  [['Right foot', '5', '3'],
   ['Left foot', '2', '5'],
   ['Head', '3', '4'],
   ['Other body parts', '1', '0']]],
 'https://www.whoscored.com/Matches/1201922/LiveStatistics/Germany-Bundesliga-2017-2018-Borussia-Dortmund-Schalke-04']
Whoscored 1 Run Time 40s
Urltime = 76s
Shot Data Downloaded
Shot Data Downloaded
Shot Data Downloaded
Shot Data Downloaded
Shot Data Downloaded
Shot Data Downloaded
Home Team Total 18 Player Downloaded
Away Team Total 18 Player Downloaded
[[['Shots', '11', '12'],
  ['Shots on target', '6', '7'],
  ['Pass Success %', '73%', '79%'],
  ['Aerial Duel Success', '32%', '68%'],
  ['Dribbles won', '5', '13'],
  ['Tackles', '24', '21']],
 ['47%', '53%'],
 [['Roman Weidenfeller', 0, 0],
  ['37', ', GK'],
  ['5.30', [['51', '60', '34']]],
  ['0', '0', '0', '46.3', '0', '46']],
 [['Marcel Schmelzer', 0, 0],
  ['30', ', DC'],
  ['6.68', []],
  ['0', '0', '0', '82.2', '0', '64']],
 [['Sokratis', 0, 0],
  ['29', ', DC'],
  ['6.94', [['17', '52', '23']]],
  ['0', '0', '0', '84', '3', '67']],
 [['?mer Toprak', 0, 0],
  ['28', ', DC'],
  ['6.36', []],
  ['1', '0', '0', '71.4', '1', '50']],
 [['Christian Pulisic', 0, 0],
  ['19', ', DMR'],
  ['5.76', []],
  ['0', '0', '1', '76', '0', '42']],
 [['Raphael Guerreiro ', '18', '(82′)'],
  ['24', ', DML'],
  ['8.08', [['16', '24', '11']]],
  ['1', '1', '1', '91.9', '0', '70']],
 [['Julian Weigl', 0, 0],
  ['22', ', MC'],
  ['6.72', []],
  ['0', '0', '0', '64', '1', '36']],
 [['Nuri Sahin', 0, 0],
  ['29', ', MC'],
  ['6.82', [['17', '98', '45']]],
  ['1', '0', '2', '77.6', '3', '71']],
 [['Mario G?tze ', '18', '(77′)'],
  ['25', ', AMC'],
  ['7.47', [['16', '19', '48']]],
  ['1', '1', '1', '72.4', '1', '49']],
 [['Andriy Yarmolenko ', '18', '(67′)'],
  ['28', ', AMC'],
  ['6.81', []],
  ['0', '0', '2', '73.3', '1', '26']],
 [['Pierre-Emerick Aubameyang', 0, 0],
  ['28', ', FW'],
  ['7.07',
   [['17', '71', '27'],
    ['17', '54', '24'],
    ['1', '19', '46'],
    ['16', '11', '11']]],
  ['7', '4', '1', '82.4', '1', '35']],
 [['Dan-Axel Zagadou ', '19', '(82′)'],
  ['18', ', Sub'],
  ['5.78', []],
  ['0', '0', '0', '0', '0', '1']],
 [['Gonzalo Castro ', '19', '(77′)'],
  ['30', ', Sub'],
  ['5.70', [['17', '78', '11']]],
  ['0', '0', '0', '0', '0', '2']],
 [['Marc Bartra ', '19', '(67′)'],
  ['27', ', Sub'],
  ['5.99', []],
  ['0', '0', '0', '0', '0', '10']],
 [['André Schürrle', 0, 0],
  ['27', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Maximilian Philipp', 0, 0],
  ['24', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Shinji Kagawa', 0, 0],
  ['28', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Dominik Reimann', 0, 0],
  ['20', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Ralf F?hrmann', 0, 0],
  ['29', ', GK'],
  ['5.73', [['17', '98', '44']]],
  ['0', '0', '0', '58.3', '0', '22']],
 [['Naldo', 0, 0],
  ['35', ', DC'],
  ['7.56', [['16', '93', '33']]],
  ['1', '1', '0', '83', '8', '65']],
 [['Benjamin Stambouli', 0, 0],
  ['27', ', DC'],
  ['7.33', [['1', '85', '5'], ['1', '60', '32'], ['16', '17', '49']]],
  ['0', '0', '3', '79.4', '2', '76']],
 [['Thilo Kehrer ', '18', '(45′)'],
  ['21', ', DC'],
  ['5.32', [['17', '21', '55']]],
  ['0', '0', '0', '66.7', '1', '28']],
 [['Daniel Caligiuri', 0, 0],
  ['30', ', DMR'],
  ['9.08', [['16', '85', '9'], ['17', '46', '40']]],
  ['4', '3', '1', '75', '1', '79']],
 [['Bastian Oczipka', 0, 0],
  ['29', ', DML'],
  ['7.37', []],
  ['0', '0', '1', '74.2', '1', '68']],
 [['Max Meyer', 0, 0],
  ['22', ', MC'],
  ['6.50', []],
  ['0', '0', '0', '92.1', '0', '73']],
 [['Weston McKennie ', '18', '(32′)'],
  ['19', ', MC'],
  ['5.54', [['17', '2', '17']]],
  ['0', '0', '0', '60', '2', '8']],
 [['Franco Di Santo ', '18', '(32′)'],
  ['28', ', FWR'],
  ['5.66', []],
  ['0', '0', '0', '100', '1', '7']],
 [['Guido Burgstaller', 0, 0],
  ['28', ', FW'],
  ['7.40', [['16', '60', '35']]],
  ['3', '2', '0', '71.4', '0', '39']],
 [['Yevhen Konoplyanka', 0, 0],
  ['28', ', FWL'],
  ['7.88', [['1', '93', '31'], ['17', '89', '29'], ['1', '64', '10']]],
  ['1', '0', '3', '73.3', '0', '32']],
 [['Leon Goretzka ', '19', '(32′)'],
  ['23', ', Sub'],
  ['6.79', []],
  ['2', '0', '1', '78.6', '1', '37']],
 [['Amine Harit ', '19', '(32′)'],
  ['20', ', Sub'],
  ['8.10', [['16', '64', '12']]],
  ['1', '1', '1', '84.2', '2', '42']],
 [['Matija Nastasic ', '19', '(45′)'],
  ['24', ', Sub'],
  ['7.36', []],
  ['0', '0', '0', '78.1', '4', '50']],
 [['Alessandro Sch?pf', 0, 0],
  ['24', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Alexander Nübel', 0, 0],
  ['21', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Coke', 0, 0], ['30', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']],
 [['Breel Embolo', 0, 0],
  ['21', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']]]
Whoscored 2 Run Time 206s

Process finished with exit code 0


###################################################################################################

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import datetime
import pprint


def whoscored_board(driver):
    #射门数和控球率
    dataall = []
    for i in [3, 5]:
        datas = []
        for j in [1, 3]:
            data = driver.find_element_by_xpath('//*[@id="match-centre-stats"]/ul/li[%s]/div[1]/span[%s]' % (i, j)).text
            datas.append(data)
        title = driver.find_element_by_xpath('//*[@id="match-centre-stats"]/ul/li[%s]/h4' % i).text
        datas.insert(0, title)
        dataall.append(datas)
    return dataall


def whoscored_chalkboard(driver):
    #选取元素
    #射门数据
    shotall = []
    for h in range(4):
        indexh = [6, 3, 5, 4]
        results = []
        for i in range(2, indexh[h]+2):
            shot = []
            for j in range(2):
                sot = driver.find_element_by_xpath(
                    '//*[@id="chalkboard"]/div[2]/div[1]/div[%s]/div[%s]/span[%s]' % (h + 2, i, j+1)).text
                shot.append(sot)
            label = driver.find_element_by_xpath(
                '//*[@id="chalkboard"]/div[2]/div[1]/div[%s]/div[%s]/label' % (h + 2, i)).text
            shot.insert(0, label)
            results.append(shot)
        shotall.append(results)
    return shotall


def whoscored_player_stat(driver):

    alldata = []
    # 射门信息
    allshotdata = []
    try:
        for i in range(1, 7):
            shotdata = []
            shota = driver.find_element_by_xpath(
                '//*[@id="match-report-team-statistics"]/div[1]/div[%s]/span[1]/span' % i).text
            shotb = driver.find_element_by_xpath(
                '//*[@id="match-report-team-statistics"]/div[1]/div[%s]/span[2]' % i).text
            shotc = driver.find_element_by_xpath(
                '//*[@id="match-report-team-statistics"]/div[1]/div[%s]/span[3]/span' % i).text
            shotdata.append(shotb)
            shotdata.append(shota)
            shotdata.append(shotc)
            allshotdata.append(shotdata)
        print('Shot Data Downloaded')
    except:
        print('Shot Data Error')
    alldata.append(allshotdata)
    # 控球率
    Possessiondata = []
    try:
        shotdata = []
        possa = driver.find_element_by_xpath(
            '//*[@id="match-report-team-statistics"]/div[2]/div[2]/span/span[2]/span').text
        possb = driver.find_element_by_xpath(
            '//*[@id="match-report-team-statistics"]/div[2]/div[2]/span/span[3]/span').text
        Possessiondata.append(possa)
        Possessiondata.append(possb)
    except:
        print('Possession Error')
    alldata.append(Possessiondata)
    # 球员信息
    xpathlist = ['*[@id="statistics-table-home-summary"]/table/tbody',
                 '*[@id="statistics-table-away-summary"]/table/tbody']
    for xp in xpathlist:
        homeaway = ['Home', 'Away']
        i = 1
        while i < 30:
            playeralldata = []
            try:
                playerdata = []
                # 名字
                player = driver.find_element_by_xpath(
                    '//%s/tr[%s]/td[@class="pn"]/a' % (xp, i)).text
                # 换上换下
                try:
                    inouttime = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="pn"]/a/span' % (xp, i)).text
                    if len(inouttime) > 0:
                        inouttype = driver.find_element_by_xpath(
                            '//%s/tr[%s]/td[@class="pn"]/a/span/span' % (xp, i)).get_attribute(
                            'data-type')
                    else:
                        inouttype = 0
                        inouttime = 0
                    if inouttime != '':
                        player = player.replace(inouttime, '')
                    playerdata.append(player)
                    playerdata.append(inouttype)
                    playerdata.append(inouttime)
                except:
                    playerdata.append(player)
                    playerdata.append(0)
                    playerdata.append(0)
                playeralldata.append(playerdata)
                playerdata = []
                # 年龄和位置
                try:
                    # 年龄
                    age = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="pn"]/span[1]' % (xp, i)).text
                    playerdata.append(age)
                    # 位置
                    pos = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="pn"]/span[2]' % (xp, i)).text
                    playerdata.append(pos)
                except:
                    print(player + ' Age or Position Error')
                playeralldata.append(playerdata)
                playerdata = []
                # 关键数据
                try:
                    # Rating
                    rating = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="rating "]' % (xp, i)).text
                    playerdata.append(rating)
                    # Key Events
                    j = 1
                    allevent = []
                    while j < 10:
                        events = []
                        try:
                            event = driver.find_element_by_xpath(
                                '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                    xp, i, j)).get_attribute('data-type')
                            eventminute = driver.find_element_by_xpath(
                                '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                    xp, i, j)).get_attribute('data-minute')
                            eventsecond = driver.find_element_by_xpath(
                                '//%s/tr[%s]/td[@style="text-align: left"]/span[@class="incident-wrapper"]/span[%s]' % (
                                    xp, i, j)).get_attribute('data-second')
                            events.append(event)
                            events.append(eventminute)
                            events.append(eventsecond)
                            allevent.append(events)
                            j += 1
                        except:
                            break
                    playerdata.append(allevent)
                except:
                    print(player + ' Key Data Error')
                playeralldata.append(playerdata)
                playerdata = []
                # 其他数据
                try:
                    # 射门数
                    shottotal = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="ShotsTotal "]' % (xp, i)).text
                    playerdata.append(shottotal)
                    # 射正数
                    shotontarget = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="ShotOnTarget "]' % (xp, i)).text
                    playerdata.append(shotontarget)
                    # 关键传球数
                    keypass = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="KeyPassTotal "]' % (xp, i)).text
                    playerdata.append(keypass)
                    # 传球成功率
                    passsuccess = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="PassSuccessInMatch "]' % (xp, i)).text
                    playerdata.append(passsuccess)
                    # 空中争抢
                    DuelAerialWon = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="DuelAerialWon "]' % (xp, i)).text
                    playerdata.append(DuelAerialWon)
                    # 触球数
                    Touches = driver.find_element_by_xpath(
                        '//%s/tr[%s]/td[@class="Touches "]' % (xp, i)).text
                    playerdata.append(Touches)
                except:
                    print(player + ' Other Data Error')
                i += 1
                playeralldata.append(playerdata)
                playerdata = []
                alldata.append(playeralldata)
            except:
                print(homeaway[xpathlist.index(xp)] + ' Team Total ' + str(i - 1) + ' Player Downloaded')
                break
    return alldata


def whoscored_selenium_main():
    starttime = datetime.datetime.now()
    # Chrome Headless
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--disable-gpu')
    #driver = webdriver.Chrome(chrome_options=chrome_options)
    driver = webdriver.Chrome()

    # 打开网址
    driver.get('https://www.whoscored.com/Matches/1201922/Live/Germany-Bundesliga-2017-2018-Borussia-Dortmund-Schalke-04')
    driver.implicitly_wait(3)
    endtime = datetime.datetime.now()
    print('Board Urltime = ' + str((endtime - starttime).seconds) + 's')

    # 读取Board页面
    whoscored1 = whoscored_board(driver)
    pprint.pprint(whoscored1)
    endtime = datetime.datetime.now()
    print('Board Run Time ' + str((endtime - starttime).seconds) + 's')

    # 打开chalkboard页面
    elem = driver.find_element_by_xpath('//*[@id="live-match-options"]/li[3]/a/span[2]')
    elem.click()
    driver.implicitly_wait(3)
    endtime = datetime.datetime.now()
    print('Chalkboard UrlTime = ' + str((endtime - starttime).seconds) + 's')

    # 读取chalkboard页面
    whoscored2 = whoscored_chalkboard(driver)
    pprint.pprint(whoscored2)
    endtime = datetime.datetime.now()
    print('Chalkboard Run Time ' + str((endtime - starttime).seconds) + 's')

    # 打开Player Stats页面
    elem = driver.find_element_by_xpath('//*[@id="sub-sub-navigation"]/ul/li[2]/a')
    elem.click()
    driver.implicitly_wait(3)
    endtime = datetime.datetime.now()
    print('Player Stats Urltime = ' + str((endtime - starttime).seconds) + 's')

    # 读取Player Stats页面
    whoscored3 = whoscored_player_stat(driver)
    pprint.pprint(whoscored3)
    endtime = datetime.datetime.now()
    print('Player Stats Run Time ' + str((endtime - starttime).seconds) + 's')

    driver.quit()


whoscored_selenium_main()

***********************************************************************
中间chalkboard的函数名错了，上边的改了结果没记
E:\PycharmProjects\Selenium\venv\Scripts\python.exe E:/PycharmProjects/Selenium/Whoscored-Selenium.py
Board Urltime = 38s
[['Total Shots', '11', '12'], ['Possession%', '47', '53']]
Board Run Time 39s
Chalkboard UrlTime = 39s
Shot Data Error
Possession Error
Home Team Total 0 Player Downloaded
Away Team Total 0 Player Downloaded
[[], []]
Chalkboard Run Time 51s
Player Stats Urltime = 61s
Shot Data Downloaded
Home Team Total 18 Player Downloaded
Away Team Total 18 Player Downloaded
[[['Shots', '11', '12'],
  ['Shots on target', '6', '7'],
  ['Pass Success %', '73%', '79%'],
  ['Aerial Duel Success', '32%', '68%'],
  ['Dribbles won', '5', '13'],
  ['Tackles', '24', '21']],
 ['47%', '53%'],
 [['Roman Weidenfeller', 0, 0],
  ['37', ', GK'],
  ['5.30', [['51', '60', '34']]],
  ['0', '0', '0', '46.3', '0', '46']],
 [['Marcel Schmelzer', 0, 0],
  ['30', ', DC'],
  ['6.68', []],
  ['0', '0', '0', '82.2', '0', '64']],
 [['Sokratis', 0, 0],
  ['29', ', DC'],
  ['6.94', [['17', '52', '23']]],
  ['0', '0', '0', '84', '3', '67']],
 [['?mer Toprak', 0, 0],
  ['28', ', DC'],
  ['6.36', []],
  ['1', '0', '0', '71.4', '1', '50']],
 [['Christian Pulisic', 0, 0],
  ['19', ', DMR'],
  ['5.76', []],
  ['0', '0', '1', '76', '0', '42']],
 [['Raphael Guerreiro ', '18', '(82′)'],
  ['24', ', DML'],
  ['8.08', [['16', '24', '11']]],
  ['1', '1', '1', '91.9', '0', '70']],
 [['Julian Weigl', 0, 0],
  ['22', ', MC'],
  ['6.72', []],
  ['0', '0', '0', '64', '1', '36']],
 [['Nuri Sahin', 0, 0],
  ['29', ', MC'],
  ['6.82', [['17', '98', '45']]],
  ['1', '0', '2', '77.6', '3', '71']],
 [['Mario G?tze ', '18', '(77′)'],
  ['25', ', AMC'],
  ['7.47', [['16', '19', '48']]],
  ['1', '1', '1', '72.4', '1', '49']],
 [['Andriy Yarmolenko ', '18', '(67′)'],
  ['28', ', AMC'],
  ['6.81', []],
  ['0', '0', '2', '73.3', '1', '26']],
 [['Pierre-Emerick Aubameyang', 0, 0],
  ['28', ', FW'],
  ['7.07',
   [['17', '71', '27'],
    ['17', '54', '24'],
    ['1', '19', '46'],
    ['16', '11', '11']]],
  ['7', '4', '1', '82.4', '1', '35']],
 [['Dan-Axel Zagadou ', '19', '(82′)'],
  ['18', ', Sub'],
  ['5.78', []],
  ['0', '0', '0', '0', '0', '1']],
 [['Gonzalo Castro ', '19', '(77′)'],
  ['30', ', Sub'],
  ['5.70', [['17', '78', '11']]],
  ['0', '0', '0', '0', '0', '2']],
 [['Marc Bartra ', '19', '(67′)'],
  ['27', ', Sub'],
  ['5.99', []],
  ['0', '0', '0', '0', '0', '10']],
 [['André Schürrle', 0, 0],
  ['27', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Maximilian Philipp', 0, 0],
  ['24', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Shinji Kagawa', 0, 0],
  ['28', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Dominik Reimann', 0, 0],
  ['20', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Ralf F?hrmann', 0, 0],
  ['29', ', GK'],
  ['5.73', [['17', '98', '44']]],
  ['0', '0', '0', '58.3', '0', '22']],
 [['Naldo', 0, 0],
  ['35', ', DC'],
  ['7.56', [['16', '93', '33']]],
  ['1', '1', '0', '83', '8', '65']],
 [['Benjamin Stambouli', 0, 0],
  ['27', ', DC'],
  ['7.33', [['1', '85', '5'], ['1', '60', '32'], ['16', '17', '49']]],
  ['0', '0', '3', '79.4', '2', '76']],
 [['Thilo Kehrer ', '18', '(45′)'],
  ['21', ', DC'],
  ['5.32', [['17', '21', '55']]],
  ['0', '0', '0', '66.7', '1', '28']],
 [['Daniel Caligiuri', 0, 0],
  ['30', ', DMR'],
  ['9.08', [['16', '85', '9'], ['17', '46', '40']]],
  ['4', '3', '1', '75', '1', '79']],
 [['Bastian Oczipka', 0, 0],
  ['29', ', DML'],
  ['7.37', []],
  ['0', '0', '1', '74.2', '1', '68']],
 [['Max Meyer', 0, 0],
  ['22', ', MC'],
  ['6.50', []],
  ['0', '0', '0', '92.1', '0', '73']],
 [['Weston McKennie ', '18', '(32′)'],
  ['19', ', MC'],
  ['5.54', [['17', '2', '17']]],
  ['0', '0', '0', '60', '2', '8']],
 [['Franco Di Santo ', '18', '(32′)'],
  ['28', ', FWR'],
  ['5.66', []],
  ['0', '0', '0', '100', '1', '7']],
 [['Guido Burgstaller', 0, 0],
  ['28', ', FW'],
  ['7.40', [['16', '60', '35']]],
  ['3', '2', '0', '71.4', '0', '39']],
 [['Yevhen Konoplyanka', 0, 0],
  ['28', ', FWL'],
  ['7.88', [['1', '93', '31'], ['17', '89', '29'], ['1', '64', '10']]],
  ['1', '0', '3', '73.3', '0', '32']],
 [['Leon Goretzka ', '19', '(32′)'],
  ['23', ', Sub'],
  ['6.79', []],
  ['2', '0', '1', '78.6', '1', '37']],
 [['Amine Harit ', '19', '(32′)'],
  ['20', ', Sub'],
  ['8.10', [['16', '64', '12']]],
  ['1', '1', '1', '84.2', '2', '42']],
 [['Matija Nastasic ', '19', '(45′)'],
  ['24', ', Sub'],
  ['7.36', []],
  ['0', '0', '0', '78.1', '4', '50']],
 [['Alessandro Sch?pf', 0, 0],
  ['24', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Alexander Nübel', 0, 0],
  ['21', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']],
 [['Coke', 0, 0], ['30', ', Sub'], ['-', []], ['0', '0', '0', '0', '0', '0']],
 [['Breel Embolo', 0, 0],
  ['21', ', Sub'],
  ['-', []],
  ['0', '0', '0', '0', '0', '0']]]
Player Stats Run Time 189s

Process finished with exit code 0


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


###################################################################################################



***********************************************************************


